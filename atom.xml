<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hello! CytQ</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-02-11T09:59:51.083Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>CytQ</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title></title>
    <link href="http://yoursite.com/2018/02/11/%E6%9D%82%E8%B0%88%E2%80%94%E2%80%94Android%E4%BB%8E%E5%90%AF%E5%8A%A8%E5%88%B0%E7%A8%8B%E5%BA%8F%E8%BF%90%E8%A1%8C%E5%8F%91%E7%94%9F%E7%9A%84%E4%BA%8B%E6%83%85/"/>
    <id>http://yoursite.com/2018/02/11/杂谈——Android从启动到程序运行发生的事情/</id>
    <published>2018-02-11T09:59:46.475Z</published>
    <updated>2018-02-11T09:59:51.083Z</updated>
    
    <content type="html"><![CDATA[<p>转载请注明出处<br>博客地址：imlzq.com<br>作者：李中权</p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>好久没有写博客了，瞬间感觉好多学了的东西不进行一个自我的总结与消化总归变不成自己的。通过博客可能还可以找到一些当初在学习的时候没有想到的问题。想了半天，从大二上学期自学Android以来还没有对Android从启动到程序运行期间进行一个完整的归纳，刚好最近又学到了一些新东西，那就以这篇博客为媒介，总结一下从Android启动到程序运行期间发生的所有事吧。包括什么ClassLoader, JVM,IPC, 消息处理机制要是总结到了就顺带BB一下。但是这里就不包含很多细节了，比如为什么PMS内部为什么要这么构造，好处是什么，如果我来设计的话我会怎么设计啊这种暂时就不总结了，因为我觉得以我现在的水平还有学习精力来说把这些细节都一个个的弄清楚有点没抓住重点。现阶段还是先能够了解整个流程，有个大局观才是最重要的。至于以后如果有需要或者是有精力的时候再一个个的突破。</p><p><strong>发现本文的错误或者遗漏后会立刻更改</strong></p><h2 id="正式开始"><a href="#正式开始" class="headerlink" title="正式开始"></a>正式开始</h2><p>首先，我们知道，Android是基于Linux的一个操作系统，它可以分为五层，下面是它的层次架构图，可以记一下，因为后面应该会总结到SystemServer这些Application Framework层的东西<br><img src="http://gityuan.com/images/boot/android-arch1.png" alt="img"><br>Android的五层架构从上到下依次是应用层，应用框架层，库层，运行时层以及Linux内核层。</p><p>而在Linux中，它的启动可以归为一下几个流程：<br>Boot Loader-》初始化内核-》。。。。。。<br>当初始化内核之后，就会启动一个相当重要的祖先进程，也就是init进程，在Linux中所有的进程都是由init进程直接或间接fork出来的。</p><p>而对于Android来说，前面的流程都是一样的，而当init进程创建之后，会fork出一个Zygote进程，这个进程是所有Java进程的父进程。我们知道，Linux是基于C的，而Android是基于Java的（当然底层也是C）。所以这里就会fork出一个Zygote Java进程用来fork出其他的进程。<strong>【断点1】</strong></p><p>总结到了这里就提一下之后会谈到的几个非常重要的对象以及一个很重要的概念。</p><ul><li>ActivityManagerServices（AMS）：它是一个服务端对象，负责所有的Activity的生命周期，<strong>ActivityThread会通过Binder与之交互，而AMS与Zygote之间进行交互则是通过Socket通信（IPC通信在之后会总结到）</strong></li><li>ActivityThread：它也就是我们俗称的UI线程/主线程，它里面存在一个main()方法，这也是APP的真正入口，当APP启动时，就会启动ActivityThread中的main方法，它会初始化一些对象，然后开启<strong>消息循环队列（之后总结）</strong>，之后就会Looper.loop死循环，如果有消息就执行，没有就等着，也就是事件驱动模型（edt）的原理。</li><li>ApplicationThread：它实现了IBinder接口，是Activity整个框架中客户端和服务端AMS之间通信的接口，同时也是ActivityThread的内部类。这样就有效的把ActivityThread和AMS绑定在一起了。</li><li>Instrumentation：这个东西我把它理解为ActivityThread的一个工具类，也算是一个劳动者吧，对于生命周期的所有操作例如onCreate最终都是直接由它来执行的。</li></ul><p><strong>Android系统中的客户端和服务器的概念</strong><br>在Android系统中其实也存在着服务器和客户端的概念，服务器端指的就是所有App共用的系统服务，比如上面的AMS，PackageManagerService等等，这些系统服务是被所有的App共用的，当某个App想要实现某个操作的时候，就会通知这些系统服务。</p><h2 id="继续断点1"><a href="#继续断点1" class="headerlink" title="继续断点1"></a>继续断点1</h2><p>当Zygote被初始化的时候，会fork出System Server进程，这个进程在整个的Android进程中是非常重要的一个，地位和Zygote等同，它是属于Application Framework层的，Android中的所有服务，例如AMS, WindowsManager, PackageManagerService等等都是由这个SystemServer fork出来的。所以它的地位可见一斑。</p><p>而当System Server进程开启的时候，就会初始化AMS，同时，会加载本地系统的服务库，创建系统上下文，创建ActivityThread及开启各种服务等等。而在这之后，就会开启系统的Launcher程序，完成系统界面的加载与显示。<strong>【断点2】</strong></p><h2 id="Context总结"><a href="#Context总结" class="headerlink" title="Context总结"></a>Context总结</h2><p>Context是一个抽象类，下面是它的注释信息，摘自源码。</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * Interface <span class="keyword">to</span> <span class="keyword">global</span> information <span class="keyword">about</span> an <span class="built_in">application</span> environment.  This <span class="keyword">is</span></span><br><span class="line"> * an abstract <span class="built_in">class</span> <span class="keyword">whose</span> implementation <span class="keyword">is</span> provided <span class="keyword">by</span></span><br><span class="line"> * <span class="keyword">the</span> Android system.  It</span><br><span class="line"> * allows access <span class="keyword">to</span> <span class="built_in">application</span>-specific resources <span class="keyword">and</span> classes, <span class="keyword">as</span> well <span class="keyword">as</span></span><br><span class="line"> * up-calls <span class="keyword">for</span> <span class="built_in">application</span>-level operations such <span class="keyword">as</span> launching activities,</span><br><span class="line"> * broadcasting <span class="keyword">and</span> receiving intents, etc.</span><br><span class="line"> */</span><br><span class="line">public abstract <span class="built_in">class</span> Context &#123;</span><br></pre></td></tr></table></figure><p>从上面的这段话可以简单理解一下，Context是一个关于应用程序环境的全局变量接口，通过它可以允许去获得资源或者类，例如启动Activity,广播，intent等等。</p><p>我的理解：Context的具体实现是Application, Activity,Service，通过Context能够有权限去做一些事情，其实我觉得就是一个运行环境的问题。</p><p><strong>需要注意的地方</strong><br>Android开发中由于很多地方都包含了Context的使用，因此就必须要注意到内存泄露或者是一些可能会引起的问题。</p><p>例如在Toast中，它的Context就最好设置为Application Context，因为如果Toast在显示东西的时候Activity关闭了，但是由于Toast仍然持有Activity的引用，那么这个Activity就不会被回收掉，也就造成了内存泄露。</p><h2 id="Toast的相关总结"><a href="#Toast的相关总结" class="headerlink" title="Toast的相关总结"></a>Toast的相关总结</h2><p>上面举例的时候举到了Toast，其实Toast也是很有意思的一个东西，它的show方法其实并不是显示一个东西这么简单。<br>Toast实际上是一个队列，会通过show方法把新的任务加入到队列当中去，列队中只要存在消息就会弹出来使用，而队列的长度据说默认是40个（这是网上搜出来的，我在源码中没找到对应的设置，感觉也没啥必要就没找了）。<br>所以这里就要注意一下show这个操作了，它并不是显示内容，而是把内容入队列。</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Show the view for the specified duration.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (mNextView == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"setView must have been called"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        INotificationManager service = getService();</span><br><span class="line">        String pkg = mContext.getOpPackageName();</span><br><span class="line">        TN tn = mTN;</span><br><span class="line">        tn.mNextView = mNextView;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            service.enqueueToast(pkg, tn, mDuration);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (RemoteException e) &#123;</span><br><span class="line">            <span class="comment">// Empty</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="Handler的内存泄露"><a href="#Handler的内存泄露" class="headerlink" title="Handler的内存泄露"></a>Handler的内存泄露</h2><p>对于Handler来说，如果我们直接在AndroidStudio中创建一个非静态内部类Handler，那么Handler这一大片的区域会被AS标记为黄色，这个应该很多人都遇到过吧。实际上是因为这样设置会造成内存泄露，因为每一个非静态内部类都会持有一个外部类的引用，那么这里也就产生了一个内存泄露的可能点，如果当Activity被销毁时没有与Handler解除，那么Handler仍然会持有对该Activity的引用，那么就造成了内存泄露。</p><p><strong>解决方案</strong><br>使用static修饰Handler，这样也就成了一个静态内部类，那么就不会持有对外部类的引用了。而这个时候就可以在Handler中创建一个WeakReference（弱引用）来持有外部的对象。只要外部解除了与该引用的绑定，那么垃圾回收器就会在发现该弱引用的时候立刻回收掉它。</p><h2 id="垃圾回收"><a href="#垃圾回收" class="headerlink" title="垃圾回收"></a>垃圾回收</h2><p>关于垃圾回收的相关总结看我之前的博客，传送门：<a href="http://blog.csdn.net/jonstank2013/article/details/50922958" target="_blank" rel="noopener">JVM原理及底层探索</a></p><h2 id="四种引用方式"><a href="#四种引用方式" class="headerlink" title="四种引用方式"></a>四种引用方式</h2><p>上面扯到了弱引用，就再BB一下四种引用方式吧。</p><ul><li>强引用：垃圾回收器打死都不会回收掉一个强引用的，那怕是出现OOM也不会回收掉强引用，所有new出来的都是强引用。</li><li>软引用：垃圾回收器会在内存不足的情况下回收掉软引用，如果内存充足的话不会理它</li><li>弱引用：它跟软引用类似，但是它更脆弱，只要垃圾回收器一发现它，就会立刻回收掉它。比如一个对象持有一个强引用和弱引用，当强引用被取消时，那么只要GC发现了它，就会立刻回收掉。只是GC发现它的这个过程是不确定的，有可能不会马上发生，所以它可能还会多活一会，中间存在一个优先级。</li><li>虚引用：它跟上面3种方式都不同。我对虚引用的理解就是如果一个对象持有虚引用，那么就可以在被GC回收前进行一些设定好的工作等等。因为虚引用有个机制，因为虚引用必须和引用队列联合使用，当垃圾回收器准备回收一个对象时，如果发现它还有虚引用，就回在回收对象的内存前，把这个虚引用加入到与之关联的引用队列中。而程序如果判断到引用队列中已经加入了虚引用，那么就可以了解到被引用的对象马上就要被垃圾回收了，这个时候就可以做些被回收之前的事情啦。</li></ul><h2 id="ClassLoader"><a href="#ClassLoader" class="headerlink" title="ClassLoader"></a>ClassLoader</h2><p>类加载器按层次从顶层到下依次为Boorsrtap ClassLoader（启动类加载器）,Extension ClassLoader（拓展类加载器），ApplicationClassLoader（应用程序类加载器）</p><p>判断两个类是否是同一个类就是看它们是否是由同一个类加载器加载而来。</p><p>这里就需要介绍一下双亲委派模式了：<br>双亲委派模式的意思就是：除了启动类加载器之外，其余的加载器都需要指定一个父类的加载器，当需要加载的时候会先让父类去试着加载，如果父类无法加载也就是找不到这个类的话就会让子类去加载</p><p>好处：防止内存中出现多份同样的字节码</p><p>比如类A和类B都要加载system类，如果不是委托的话，类A就会加载一份，B也会加载一份，那么就会出现两份SYstem字节码<br>如果使用委托机制，会递归的向父类查找，也就是首选用Bootstrap尝试加载，如果找不到再向下，如果A用这个已经加载了的话会直接返回内存中的system而不需要重新加载。那么就只会存在一份</p><h2 id="延迟加载的应用：单例模式"><a href="#延迟加载的应用：单例模式" class="headerlink" title="延迟加载的应用：单例模式"></a>延迟加载的应用：单例模式</h2><p>对于Java来说，类是需要使用到时才会加载，这里也就出现了一个延迟加载的效果。而在延迟加载的时候，会默认保持同步。这也就产生了一种单例模式的方式，具体的看我之前的博客：<a href="http://blog.csdn.net/jonstank2013/article/details/50903830" target="_blank" rel="noopener">设计模式_单例模式</a></p><p>我觉得在android所有的创建单例模式方法中里延迟加载方式是最好吧，虽然枚举比延迟加载更好，effiective java中也很推荐，但是并不怎么适用于Android，Android里枚举的消耗是static的两倍，延迟加载的话只要我们在使用延迟加载方式时做好反序列化的返回值readResolve()准备就好了。</p><h2 id="继续断点2"><a href="#继续断点2" class="headerlink" title="继续断点2"></a>继续断点2</h2><p>上面BB了太多其他的，现在有点缓不过来，下次自己看自己博客的时候会不会都被自己的思路带得乱七八糟的。</p><p>上面的时候我们就已经完成了整个Android系统的开机以及初始化。接下来就可以B一下从点击APP图标开始到APP内部程序运行起来的流程了。</p><p>当我们点击屏幕时，触摸屏的两层电极会连接在一起，也就产生了一个电压（具体的我忘了，书上有，图找不到了），当产生电压的时候，就可以通过对应的驱动把当前按压点的XY坐标传给上层，这里也就是操作系统。操作系统在获取到XY值的时候，就会对按压点的范围进行一个判断，如果确定按压点处于一个APP图标或者是Button等等的范围中时，操作系统也就会认为用户当前已经点击了这个东西，启动对应的监听。</p><p>而当系统判断我们点击的是APP图标时，该App就由Launcher开始启动了<strong>【断点3】</strong></p><h2 id="Launcher"><a href="#Launcher" class="headerlink" title="Launcher"></a>Launcher</h2><p>Launcher是一个继承自Activity，同时实现了点击事件，长按事件等等的一个应用程序。</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">public <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Launcher</span> <span class="keyword">extends</span> <span class="title">Activity</span></span></span><br><span class="line"><span class="class">        <span class="title">implements</span> <span class="title">View</span>.<span class="title">OnClickListener</span>,<span class="title">OnLongClickListener</span>, <span class="title">LauncherModel</span>.<span class="title">Callbacks</span>,<span class="title">View</span>.<span class="title">OnTouchListener</span></span></span><br></pre></td></tr></table></figure><p>当我们点击一个APP的图标时，会调用Launcher内部的startActivitySafely()方法，而这个方法则会进行两件事，一个是启动目标activity，另一个功能就是捕获异常ActivityNotFoundException，也就是常见的“找不到activity,是否已经在androidmenifest文件中注册？”。而在startActivity方法中，经过一系列的转换最终会调用到startActivityForResult这个方法。</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">@Override</span></span><br><span class="line">   public void startActivity(Intent intent, <span class="variable">@Nullable</span> Bundle options) &#123;</span><br><span class="line">       <span class="selector-tag">if</span> (options != null) &#123;</span><br><span class="line">           <span class="selector-tag">startActivityForResult</span>(intent, -<span class="number">1</span>, options);</span><br><span class="line">       &#125; <span class="selector-tag">else</span> &#123;</span><br><span class="line">           <span class="comment">// Note we want to go through this call for compatibility with</span></span><br><span class="line">           <span class="comment">// applications that may have overridden the method.</span></span><br><span class="line">           <span class="selector-tag">startActivityForResult</span>(intent, -<span class="number">1</span>);</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>所以实际上，我对整个Android的界面是这样理解的：<br>当系统完成初始化以及各种服务的创建之后，就会启动Launcher这个应用程序（它也是继承自Activity的，包含自己对应的xml布局文件），然后再把各种图标按照一个正常APP布局的方式放在上面，当我们点击APP图标时，也就相当于在Launcher这个APP应用程序中通过startActivity（在底层最后会转为startActivityForResult）来启动这个APP。简单的讲，我觉得就是一个主要的APP（Launcher）里面启动了其他的功能APP，例如QQ、微信这些。<strong>【个人理解，如果以后发现不对再修改】</strong></p><h2 id="Android中点击事件的处理"><a href="#Android中点击事件的处理" class="headerlink" title="Android中点击事件的处理"></a>Android中点击事件的处理</h2><p>当我们手指按下时，Android是如何处理点击事件的呢？如何确定是让哪一个控件来处理呢？<br>简单一句话：层层传递-冒泡的方式处理<br>举个例子：现在公司来了个小项目，老板一看分配给经理做，经理一看分配给小组长，小组长一看好简单，分配给组员。如果在这个传递过程中（也就是还为分配到最底部时），某一层觉得我来负责这个比较好的话就会拦截掉这个消息，然后把它处理了，下面的就收不到有消息的这个通知。如果一直到了底层的话，组员如果能完成，就完成它。如果不能完成，那么就报告给组长，说组长我做不来，边学边做要影响进度。组长一看我也做不来，就给经理，经理一看我也不会，就给老板。这样也就一层层的传递了。<br>总结一下就是消息从上到下依次传递，如果在传递的过程中被拦截了就停止下传。如果没有被拦截，就一直传递到底部，如果底部不能够消耗该消息，那么就又一层层的返回来，返给上层，直到被消耗或者是到达最顶层。</p><p>在Android中，存在三个重要的方法：</p><ul><li>dispathTouchEvent(MotionEvent ev)</li><li>onInterceptTouchEvent(MotionEvent ev)</li><li>onTouchEvent(MotionEvent ev)</li></ul><p>第一个方法负责事件的分发，它的返回值就是表示是否消耗当前事件。<br>第二个方法是用于判断是否拦截该消息，如果当前View拦截了某个时间，那么在同一个事件序列中，此方法不会被再次调用。返回结果表示是否拦截当前事件<br>第三个方法就是处理事件。返回结果表示是否消耗当前事件，如果不小号，则在同一时间序列中，当前View无法再次接收到事件。</p><p>对于一个根ViewGroup来说，点击事件产生后，首先会传递给它，调用它的dispath方法。如果这个ViewGroup的onIntercept方法返回true就表示它要拦截当前事件，false就表示不拦截，这个时候事件就会继续传递给子元素，接着调用子元素的dispath方法，直到被处理。</p><h2 id="滑动冲突"><a href="#滑动冲突" class="headerlink" title="滑动冲突"></a>滑动冲突</h2><p>顺带总结一下滑动冲突的解决吧<br>View的滑动冲突一般可以分为三种：</p><ul><li>外部滑动和内部滑动方向不一致</li><li>外部滑动方向和内部滑动方向一致</li><li>嵌套上面两种情况</li></ul><p>比如说一个常见的，外部一个ListView，里面一个ScrollView。这个时候该怎么解决呢？其实这里想到了ViewPager，它里面实际上是解决了滑动冲突的，可以借鉴一下它的。</p><p><strong>滑动处理规则</strong><br>一般来说，我们可以根据用户手指滑动的方向以及角度来判断用户是要朝着哪个方向去滑动。而很多时候还可以根据项目的需求来指定一套合适的滑动方案。</p><p><strong>外部拦截法</strong><br>这种方法就是指所有的点击时间都经过父容器的拦截处理，如果父容器需要此时间就拦截，如果不需要此事件就不拦截。通过重写父容器的onInterceptTouchEvent方法：</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">case</span> MotionEvent.<span class="string">ACTION_DOWN:</span></span><br><span class="line">intercepted = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> MotionEvent.<span class="string">ACTION_MOVE:</span></span><br><span class="line"><span class="keyword">if</span>(父类容器需要) &#123;</span><br><span class="line">intercepted = <span class="literal">true</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">intercepted = <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> MotionEvent.<span class="string">ACTION_UP:</span></span><br><span class="line">intercepted = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> intercepted;</span><br></pre></td></tr></table></figure><p>这里有一点需要注意，ACTION_DOWN事件父类容器就必须返回false，因为如果父类容器拦截了的话，后面的Move等所有事件都会直接由父类容器处理，就无法传给子元素了。UP事件也要返回false，因为它本身来说没有太多的意义，但是对于子元素就不同了，如果拦截了，那么子元素的onClick事件就无法触发。</p><p><strong>内部拦截法</strong><br>这种方法指的是父容器不拦截任何时间，所有的事件都传递给子元素，如果子元素需要此事件就直接消耗掉，否则就交给父容器进行处理。它需要配合requestDisallowInterceptTouchEvent方法才能正常工作。我们需要重写子元素的dispatch方法</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">case</span> MotionEvent.<span class="string">ACTION_DOWN:</span></span><br><span class="line">parent.requestDisallowInterceptTouchEvent(<span class="literal">true</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">MotionEvent.<span class="string">ACTION_MOVE:</span></span><br><span class="line"><span class="keyword">if</span>(父容器需要此类点击事件) &#123;</span><br><span class="line">parent.requestDisallowInterceptTouchEvent(<span class="literal">false</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">super</span>.dispatchTouchEvent(event);</span><br></pre></td></tr></table></figure><p>这种方法的话父类容器需要默认拦截除了ACTION_DOWN以外的其他时间，这样当子元素调用request方法的时候父元素才能继续拦截所需的事件。</p><p><strong>其他的</strong><br>如果觉得上面两个方式太复杂，看晕了，其实也可以自己根据项目的实际需要来指定自己的策略实现。例如根据你手指按的点的位置来判断你当前触碰的是哪个控件，以此来猜测用户是否是要对这个控件进行操作。如果点击的是空白的地方，就操作外部控件即可。</p><p><strong>【等有时间了就把ViewPager的处理总结一下，挺重要的】</strong></p><h2 id="继续断点3"><a href="#继续断点3" class="headerlink" title="继续断点3"></a>继续断点3</h2><ul><li>当我们点击桌面的APP图标时，Launcher进程会采用Binder的方式向AMS发出startActivity请求</li><li>AMS在接收到请求之后，就会通过Socket向Zygote进程发送创建进程的请求</li><li>Zygote进程会fork出新的子进程（APP进程）</li><li>之后APP进程会再向AMS发起一次请求，AMS收到之后经过一系列的准备工作再回传请求。</li><li>APP进程收到AMS返回的请求后，会利用Handler向主线程发送LAUNCH_ACTIVITY消息</li><li>主线程在收到消息之后，就创建目标Activity，并回调onCreate()/onStart()/onResume()等方法，UI渲染结束后便可以看到App主界面<br><strong>【断点4】</strong></li></ul><h2 id="Handler-Looper-Message-Queue-ThreadLocal机制"><a href="#Handler-Looper-Message-Queue-ThreadLocal机制" class="headerlink" title="Handler/Looper/Message Queue/ThreadLocal机制"></a>Handler/Looper/Message Queue/ThreadLocal机制</h2><p>Android的消息机制主要是指Handler的运行机制，Handler的运行需要底层的MessageQueue和Looper的支撑</p><p>虽然MessageQueue叫做消息队列，但是实际上它内部的存储结构是单链表的方式。由于Message只是一个消息的存储单元，它不能去处理消息，这个时候Looper就弥补了这个功能，Looper会以无限循环的形式去查找是否有新消息，如果有的话就处理消息，否则就一直等待（机制等会介绍）。而对于Looper来说，存在着另外的一个很重要的概念，就是ThreadLocal。</p><h2 id="ThreadLocal"><a href="#ThreadLocal" class="headerlink" title="ThreadLocal"></a>ThreadLocal</h2><p>ThreadLocal它并不是一个线程，而是一个可以在每个线程中存储数据的数据存储类，通过它可以在指定的线程中存储数据，数据存储之后，只有在指定线程中可以获取到存储的数据，对于其他线程来说则无法获取到该线程的数据。<br>举个例子，多个线程通过同一个ThreadLocal获取到的东西是不一样的，就算有的时候出现的结果是一样的（偶然性，两个线程里分别存了两份相同的东西），但他们获取的本质是不同的。</p><p>那为什么有这种区别呢？为什么要这样设计呢？<br>先来研究一下为什么会出现这个结果。<br>在ThreadLocal中存在着两个很重要的方法，get和set方法，一个读取一个设置。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Returns the value of this variable for the current thread. If an entry</span></span><br><span class="line"><span class="comment">    * doesn't yet exist for this variable on this thread, this method will</span></span><br><span class="line"><span class="comment">    * create an entry, populating the value with the result of</span></span><br><span class="line"><span class="comment">    * &#123;<span class="doctag">@link</span> #initialValue()&#125;.</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span> the current value of the variable for the calling thread.</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="meta">@SuppressWarnings(<span class="meta-string">"unchecked"</span>)</span></span><br><span class="line">   <span class="keyword">public</span> T <span class="keyword">get</span>() &#123;</span><br><span class="line">       <span class="comment">// Optimized for the fast path.</span></span><br><span class="line">       Thread currentThread = Thread.currentThread();</span><br><span class="line">       Values values = values(currentThread);</span><br><span class="line">       <span class="keyword">if</span> (values != <span class="literal">null</span>) &#123;</span><br><span class="line">           Object[] table = values.table;</span><br><span class="line">           int index = hash &amp; values.mask;</span><br><span class="line">           <span class="keyword">if</span> (<span class="keyword">this</span>.reference == table[index]) &#123;</span><br><span class="line">               <span class="keyword">return</span> (T) table[index + <span class="number">1</span>];</span><br><span class="line">           &#125;</span><br><span class="line">       &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">           values = initializeValues(currentThread);</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">return</span> (T) values.getAfterMiss(<span class="keyword">this</span>);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Sets the value of this variable for the current thread. If set to</span></span><br><span class="line"><span class="comment">    * &#123;<span class="doctag">@code</span> null&#125;, the value will be set to null and the underlying entry will</span></span><br><span class="line"><span class="comment">    * still be present.</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> value the new value of the variable for the caller thread.</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">public</span> void <span class="keyword">set</span>(T value) &#123;</span><br><span class="line">       Thread currentThread = Thread.currentThread();</span><br><span class="line">       Values values = values(currentThread);</span><br><span class="line">       <span class="keyword">if</span> (values == <span class="literal">null</span>) &#123;</span><br><span class="line">           values = initializeValues(currentThread);</span><br><span class="line">       &#125;</span><br><span class="line">       values.put(<span class="keyword">this</span>, value);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>摘自源码<br>首先研究它的get方法吧，从注释上可以看出，get方法会返回一个当前线程的变量值，如果数组不存在就会创建一个新的。<br>这里有几个很重要的词，就是“当前线程”和“数组”。<br>这里提到的数组对于每个线程来说都是不同的，values.table，而values是通过当前线程获取到的一个Values对象，因此这个数组是每个线程唯一的，不能共用，而下面的几句话也更直接了，获取一个索引，再返回通过这个索引找到数组中对应的值。这也就解释了为什么多个线程通过同一个ThreadLocal返回的是不同的东西。</p><p>那这里为什么要这么设置呢？翻了一下书，搜了一下资料：</p><ul><li>ThreadLocal在日常开发中使用到的地方较少，但是在某些特殊的场景下，通过ThreadLocal可以轻松实现一些看起来很复杂的功能。一般来说，当某些数据是以线程为作用域并且不同线程具有不同的数据副本的时候，就可以考虑使用ThreadLocal。例如在Handler和Looper中。对于Handler来说，它需要获取当前线程的Looper，很显然Looper的作用域就是线程并且不同的线程具有不同的Looper，这个时候通过ThreadLocal就可以轻松的实现Looper在线程中的存取。如果不采用ThreadLocal，那么系统就必须提供一个全局的哈希表供Handler查找指定的Looper，这样就比较麻烦了，还需要一个管理类。</li><li>ThreadLocal的另一个使用场景是复杂逻辑下的对象传递，比如监听器的传递，有些时候一个线程中的任务过于复杂，就可能表现为函数调用栈比较深以及代码入口的多样性，这种情况下，我们又需要监听器能够贯穿整个线程的执行过程。这个时候就可以使用到ThreadLocal，通过ThreadLocal可以让监听器作为线程内的全局对象存在，在线程内通过get方法就可以获取到监听器。如果不采用的话，可以使用参数传递，但是这种方式在设计上不是特别好，当调用栈很深的时候，通过参数来传递监听器这个设计太糟糕。而另外一种方式就是使用static静态变量的方式，但是这种方式存在一定的局限性，拓展性并不是特别的强。比如有10个线程在执行，就需要提供10个监听器对象。</li></ul><h2 id="消息机制"><a href="#消息机制" class="headerlink" title="消息机制"></a>消息机制</h2><p>上面提到了Handler/Looper/Message Queue，它们实际上是一个整体，只不过我们在开发中接触更多的是Handler而已，Handler的主要作用是将一个任务切换到某个指定的线程中去执行，而Android之所以提供这个机制是因为Android规定UI只能在主线程中进程，如果在子线程中访问UI就会抛出异常。</p><p><strong>为什么Android不允许在子线程访问UI</strong><br>其实这一点不仅仅是对于Android,对于其他的所有图形界面现在都采用的是单线程模式。<br>因为对于一个多线程来说，如果子线程更改了UI，那么它的相关操作就必须对其他子线程可见，也就是Java并发中很重要的一个概念，线程可见性，Happen-before原则<strong>【下篇博客总结一下自己对Java并发的理解吧，挺重要的，总结完后再把传送门贴过来】</strong>而一般来说，对于这种并发访问，一般都是采用加锁的机制，但是加锁的机制存在很明显的问题：让UI访问间的逻辑变得复杂，同时效率也会降低。甚至有的时候还会造成死锁的情况，这个时候就麻烦了。<br>而至于究竟能不能够实现这种UI界面的多线程呢？SUN公司的某个大牛（忘了是谁，很久之前看的，好像是前副总裁）说：“行肯定是没问题，但是非常考技术，因为必须要考虑到很多种情况，这个时候就需要技术专家来设计。而这种设计出来的东西对于广大普通程序员来说又是异常头疼的，就算是实现了多线程，普通人用起来也是怨声载道的。所以建议还是单线程”。</p><h2 id="死锁"><a href="#死锁" class="headerlink" title="死锁"></a>死锁</h2><p>顺带着BB一下死锁。</p><p><strong>死锁的四个必要条件</strong></p><ol><li>互斥条件：资源不能被共享，只能被同一个进程使用</li><li>请求与保持条件：已经得到资源的进程可以申请新的资源</li><li>非剥夺条件：已经分配的资源不能从相应的进程中被强制剥夺</li><li>循环等待条件：系统中若干进程组成环路，该环路中每个进程都在等待相邻进程占用的资源</li></ol><p>举个常见的死锁例子：进程A中包含资源A,进程B中包含资源B，A的下一步需要资源B，B的下一步需要资源A，所以它们就互相等待对方占有的资源释放，所以也就产生了一个循环等待死锁。</p><p><strong>处理死锁的方法</strong></p><ol><li>忽略该问题，也就是鸵鸟算法。当发生了什么问题时，不管他，直接跳过，无视它。</li><li>检测死锁并恢复</li><li>资源进行动态分配</li><li>破除上面的四种死锁条件之一</li></ol><h2 id="继续消息机制"><a href="#继续消息机制" class="headerlink" title="继续消息机制"></a>继续消息机制</h2><p>MessageQueue主要包含两个操作：插入和读取，读取操作本身会伴随着删除操作，插入和读取对应的方法分别为enqueueMessage和next，其中enqueueMessage的作用是往消息队列中插入一条消息，而next的作用是从消息队列中取出一条消息并将其从消息队列中移除。这也就是为什么使用的是一个单链表的数据结构来维护消息列表，因为它在插入和删除上比较有优势（把下一个连接的点切换一下就完成了）。</p><p>而对于MessageQueue的插入操作来说，没什么可以看的，也就这样吧，主要需要注意的是它的读取方法next。</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><span class="line">Message <span class="keyword">next</span>() &#123;</span><br><span class="line">       <span class="comment">// Return here if the message loop has already quit and been disposed.</span></span><br><span class="line">       <span class="comment">// This can happen if the application tries to restart a looper after quit</span></span><br><span class="line">       <span class="comment">// which is not supported.</span></span><br><span class="line">       <span class="keyword">final</span> <span class="keyword">long</span> ptr = mPtr;</span><br><span class="line">       <span class="keyword">if</span> (ptr == <span class="number">0</span>) &#123;</span><br><span class="line">           <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">int</span> pendingIdleHandlerCount = -<span class="number">1</span>; <span class="comment">// -1 only during first iteration</span></span><br><span class="line">       <span class="keyword">int</span> nextPollTimeoutMillis = <span class="number">0</span>;</span><br><span class="line">       <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">           <span class="keyword">if</span> (nextPollTimeoutMillis != <span class="number">0</span>) &#123;</span><br><span class="line">               Binder.flushPendingCommands();</span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line">           nativePollOnce(ptr, nextPollTimeoutMillis);</span><br><span class="line"></span><br><span class="line">           <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">               <span class="comment">// Try to retrieve the next message.  Return if found.</span></span><br><span class="line">               <span class="keyword">final</span> <span class="keyword">long</span> now = SystemClock.uptimeMillis();</span><br><span class="line">               Message prevMsg = <span class="keyword">null</span>;</span><br><span class="line">               Message msg = mMessages;</span><br><span class="line">               <span class="keyword">if</span> (msg != <span class="keyword">null</span> &amp;&amp; msg.target == <span class="keyword">null</span>) &#123;</span><br><span class="line">                   <span class="comment">// Stalled by a barrier.  Find the next asynchronous message in the queue.</span></span><br><span class="line">                   <span class="keyword">do</span> &#123;</span><br><span class="line">                       prevMsg = msg;</span><br><span class="line">                       msg = msg.<span class="keyword">next</span>;</span><br><span class="line">                   &#125; <span class="keyword">while</span> (msg != <span class="keyword">null</span> &amp;&amp; !msg.isAsynchronous());</span><br><span class="line">               &#125;</span><br><span class="line">               <span class="keyword">if</span> (msg != <span class="keyword">null</span>) &#123;</span><br><span class="line">                   <span class="keyword">if</span> (now &lt; msg.when) &#123;</span><br><span class="line">                       <span class="comment">// Next message is not ready.  Set a timeout to wake up when it is ready.</span></span><br><span class="line">                       nextPollTimeoutMillis = (<span class="keyword">int</span>) Math.min(msg.when - now, Integer.MAX_VALUE);</span><br><span class="line">                   &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                       <span class="comment">// Got a message.</span></span><br><span class="line">                       mBlocked = <span class="keyword">false</span>;</span><br><span class="line">                       <span class="keyword">if</span> (prevMsg != <span class="keyword">null</span>) &#123;</span><br><span class="line">                           prevMsg.<span class="keyword">next</span> = msg.<span class="keyword">next</span>;</span><br><span class="line">                       &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                           mMessages = msg.<span class="keyword">next</span>;</span><br><span class="line">                       &#125;</span><br><span class="line">                       msg.<span class="keyword">next</span> = <span class="keyword">null</span>;</span><br><span class="line">                       <span class="keyword">if</span> (DEBUG) Log.v(TAG, <span class="string">"Returning message: "</span> + msg);</span><br><span class="line">                       msg.markInUse();</span><br><span class="line">                       <span class="keyword">return</span> msg;</span><br><span class="line">                   &#125;</span><br><span class="line">               &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                   <span class="comment">// No more messages.</span></span><br><span class="line">                   nextPollTimeoutMillis = -<span class="number">1</span>;</span><br><span class="line">               &#125;</span><br><span class="line"></span><br><span class="line">               <span class="comment">// Process the quit message now that all pending messages have been handled.</span></span><br><span class="line">               <span class="keyword">if</span> (mQuitting) &#123;</span><br><span class="line">                   dispose();</span><br><span class="line">                   <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">               &#125;</span><br><span class="line"></span><br><span class="line">               <span class="comment">// If first time idle, then get the number of idlers to run.</span></span><br><span class="line">               <span class="comment">// Idle handles only run if the queue is empty or if the first message</span></span><br><span class="line">               <span class="comment">// in the queue (possibly a barrier) is due to be handled in the future.</span></span><br><span class="line">               <span class="keyword">if</span> (pendingIdleHandlerCount &lt; <span class="number">0</span></span><br><span class="line">                       &amp;&amp; (mMessages == <span class="keyword">null</span> || now &lt; mMessages.when)) &#123;</span><br><span class="line">                   pendingIdleHandlerCount = mIdleHandlers.<span class="keyword">size</span>();</span><br><span class="line">               &#125;</span><br><span class="line">               <span class="keyword">if</span> (pendingIdleHandlerCount &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">                   <span class="comment">// No idle handlers to run.  Loop and wait some more.</span></span><br><span class="line">                   mBlocked = <span class="keyword">true</span>;</span><br><span class="line">                   <span class="keyword">continue</span>;</span><br><span class="line">               &#125;</span><br><span class="line"></span><br><span class="line">               <span class="keyword">if</span> (mPendingIdleHandlers == <span class="keyword">null</span>) &#123;</span><br><span class="line">                   mPendingIdleHandlers = <span class="keyword">new</span> IdleHandler[Math.max(pendingIdleHandlerCount, <span class="number">4</span>)];</span><br><span class="line">               &#125;</span><br><span class="line">               mPendingIdleHandlers = mIdleHandlers.toArray(mPendingIdleHandlers);</span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line">           <span class="comment">// Run the idle handlers.</span></span><br><span class="line">           <span class="comment">// We only ever reach this code block during the first iteration.</span></span><br><span class="line">           <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; pendingIdleHandlerCount; i++) &#123;</span><br><span class="line">               <span class="keyword">final</span> IdleHandler idler = mPendingIdleHandlers[i];</span><br><span class="line">               mPendingIdleHandlers[i] = <span class="keyword">null</span>; <span class="comment">// release the reference to the handler</span></span><br><span class="line"></span><br><span class="line">               <span class="keyword">boolean</span> keep = <span class="keyword">false</span>;</span><br><span class="line">               <span class="keyword">try</span> &#123;</span><br><span class="line">                   keep = idler.queueIdle();</span><br><span class="line">               &#125; <span class="keyword">catch</span> (Throwable t) &#123;</span><br><span class="line">                   Log.wtf(TAG, <span class="string">"IdleHandler threw exception"</span>, t);</span><br><span class="line">               &#125;</span><br><span class="line"></span><br><span class="line">               <span class="keyword">if</span> (!keep) &#123;</span><br><span class="line">                   <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">                       mIdleHandlers.remove(idler);</span><br><span class="line">                   &#125;</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line">           <span class="comment">// Reset the idle handler count to 0 so we do not run them again.</span></span><br><span class="line">           pendingIdleHandlerCount = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">           <span class="comment">// While calling an idle handler, a new message could have been delivered</span></span><br><span class="line">           <span class="comment">// so go back and look again for a pending message without waiting.</span></span><br><span class="line">           nextPollTimeoutMillis = <span class="number">0</span>;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>源码有点长，总结一下就是：<br>next方法它是一个死循环，如果消息队列中没有消息，那么next方法就会一直阻塞在这里，当有新的消息来的时候，next方法就会返回这条信息并将其从单链表中移除。</p><p>而这个时候勒Looper就等着的，它也是一直循环循环，不停地从MessageQueue中查看是否有新消息，如果有新消息就会立刻处理，否则就会一直阻塞在那里。而对于Looper来说，它是只能创建一个的，这个要归功与它的prepare方法。</p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** Initialize the current thread as a looper.</span></span><br><span class="line"><span class="comment">     * This gives you a chance to create handlers that then reference</span></span><br><span class="line"><span class="comment">     * this looper, before actually starting the loop. Be sure to call</span></span><br><span class="line"><span class="comment">     * &#123;<span class="doctag">@link</span> #loop()&#125; after calling this method, and end it by calling</span></span><br><span class="line"><span class="comment">     * &#123;<span class="doctag">@link</span> #quit()&#125;.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">void</span> <span class="title">prepare</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       prepare(<span class="keyword">true</span>);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="function"><span class="keyword">void</span> <span class="title">prepare</span><span class="params">(<span class="keyword">boolean</span> quitAllowed)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">if</span> (sThreadLocal.get() != <span class="keyword">null</span>) &#123;</span><br><span class="line">           <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"Only one Looper may be created per thread"</span>);</span><br><span class="line">       &#125;</span><br><span class="line">       sThreadLocal.set(<span class="keyword">new</span> Looper(quitAllowed));</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>从这里我们就可以看出该prepare方法会首先检测是否已经存在looper了，如果不存在，就创建一个新的；如果存在，就抛出异常。<br>而之后使用Looper.loop()就可以开启消息循环了。</p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Run the message queue in this thread. Be sure to call</span></span><br><span class="line"><span class="comment">   * &#123;<span class="doctag">@link</span> #quit()&#125; to end the loop.</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">void</span> <span class="title">loop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">final</span> Looper me = myLooper();</span><br><span class="line">      <span class="keyword">if</span> (me == <span class="keyword">null</span>) &#123;</span><br><span class="line">          <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"No Looper; Looper.prepare() wasn't called on this thread."</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">final</span> MessageQueue queue = me.mQueue;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// Make sure the identity of this thread is that of the local process,</span></span><br><span class="line">      <span class="comment">// and keep track of what that identity token actually is.</span></span><br><span class="line">      Binder.clearCallingIdentity();</span><br><span class="line">      <span class="keyword">final</span> <span class="keyword">long</span> ident = Binder.clearCallingIdentity();</span><br><span class="line"></span><br><span class="line">      <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">          Message msg = queue.next(); <span class="comment">// might block</span></span><br><span class="line">          <span class="keyword">if</span> (msg == <span class="keyword">null</span>) &#123;</span><br><span class="line">              <span class="comment">// No message indicates that the message queue is quitting.</span></span><br><span class="line">              <span class="keyword">return</span>;</span><br><span class="line">          &#125;</span><br><span class="line"></span><br><span class="line">          <span class="comment">// This must be in a local variable, in case a UI event sets the logger</span></span><br><span class="line">          Printer logging = me.mLogging;</span><br><span class="line">          <span class="keyword">if</span> (logging != <span class="keyword">null</span>) &#123;</span><br><span class="line">              logging.println(<span class="string">"&gt;&gt;&gt;&gt;&gt; Dispatching to "</span> + msg.<span class="keyword">target</span> + <span class="string">" "</span> +</span><br><span class="line">                      msg.callback + <span class="string">": "</span> + msg.what);</span><br><span class="line">          &#125;</span><br><span class="line"></span><br><span class="line">          msg.<span class="keyword">target</span>.dispatchMessage(msg);</span><br><span class="line"></span><br><span class="line">          <span class="keyword">if</span> (logging != <span class="keyword">null</span>) &#123;</span><br><span class="line">              logging.println(<span class="string">"&lt;&lt;&lt;&lt;&lt; Finished to "</span> + msg.<span class="keyword">target</span> + <span class="string">" "</span> + msg.callback);</span><br><span class="line">          &#125;</span><br><span class="line"></span><br><span class="line">          <span class="comment">// Make sure that during the course of dispatching the</span></span><br><span class="line">          <span class="comment">// identity of the thread wasn't corrupted.</span></span><br><span class="line">          <span class="keyword">final</span> <span class="keyword">long</span> newIdent = Binder.clearCallingIdentity();</span><br><span class="line">          <span class="keyword">if</span> (ident != newIdent) &#123;</span><br><span class="line">              Log.wtf(TAG, <span class="string">"Thread identity changed from 0x"</span></span><br><span class="line">                      + Long.toHexString(ident) + <span class="string">" to 0x"</span></span><br><span class="line">                      + Long.toHexString(newIdent) + <span class="string">" while dispatching to "</span></span><br><span class="line">                      + msg.<span class="keyword">target</span>.getClass().getName() + <span class="string">" "</span></span><br><span class="line">                      + msg.callback + <span class="string">" what="</span> + msg.what);</span><br><span class="line">          &#125;</span><br><span class="line"></span><br><span class="line">          msg.recycleUnchecked();</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>从这里面我们可以看到它也是个死循环，会不停的调用queue.next()方法来获取信息，如果没有，就return,如果有就处理。</p><p><strong>注意</strong><br>当然了，这里有一个很重要的点，一般可能会忘，那就是在子线程中如果手动为其创建了Looper，那么在所有的事情完成以后应该调用quit方法来终止消息循环，否则这个子线程就会一直处于等待状态，而如果退出Looper之后，这个线程就会立刻终止，所以建议不需要使用的时候终止Looper。</p><p><strong>Handler</strong><br>上面总结了Looper和MessageQueue，这里就对Handler进行一个总结吧。它的工作主要包含消息的发送和接受过程，消息的发送可以通过post的一系列方法以及send的一系列方法来实现，post的一系列方法最终是通过send的一系列方法来实现的。<br>实际上它发送消息的过程仅仅是向消息队列中插入了一条消息，MessageQueue的next方法就会返回这条消息给Looper，Looper在收到消息之后就会开始处理了。最后由Looper交给Handler处理（handleMessage()方法）。</p><h2 id="IPC通信"><a href="#IPC通信" class="headerlink" title="IPC通信"></a>IPC通信</h2><p>上面总结完了Android的消息处理机制，那么就顺带总结一下IPC通信吧，毕竟上面提到过那么多次Binder和Socket。</p><p>资料：<a href="https://www.zhihu.com/question/39440766#answer-31119460" target="_blank" rel="noopener">为什么Android要采用Binder作为IPC机制？</a><br>知乎上面的回答相当的好，这个博主对系统底层也是颇有钻研，学习。</p><p>这里就结合上面的知乎回答以及加上《Linux程序设计》还有一本Linux内核剖析（书名忘了但是讲得真的非常好），掺杂一些个人的理解。</p><p><strong>进程的定义</strong><br>UNIX标准把进程定义为：“一个其中运行着一个或多个进程的地址控件和这些线程所需要的系统资源”。目前，可以简单的把进程看做正在运行的程序。</p><p>进程都会被分配一个唯一的数字编号，我们成为PID（也就是进程标识符），它通常是一个取值范围从2到32768的正整数。当进程被启动时，系统将按顺序选择下一个未被使用的数字作为PID，当数字已经回绕一圈时，新的PID重新从2开始，数字1一般是为init保留的。在进程中，存在一个自己的栈空间，用于保存函数中的局部变量和控制函数的调用与返回。进程还有自己的环境空间，包含专门为这个进程建立的环境变量，同时还必须要维护自己的程序计数器，这个计数器用来记录它执行到的位置，即在执行线程中的位置。<br>在Linux中可以通过system函数来启动一个进程</p><p><strong>守护进程</strong><br>这里就需要提到一个守护进程了，这个在所有的底层中经常都会被提到。<br>在linux或者unix操作系统中在系统引导的时候会开启很多服务，这些服务就叫做守护进程。为了增加灵活性，root可以选择系统开启的模式，这些模式叫做运行级别，每一种运行级别以一定的方式配置系统。 守护进程是脱离于终端并且在后台运行的进程。守护进程脱离于终端是为了避免进程在执行过程中的信息在任何终端上显示并且进程也不会被任何终端所产生的终端信息所打断。<br>守护进程常常在系统引导装入时启动，在系统关闭时终止。如果想要某个进程不因为用户或终端或其他的变化而受到影响，那么就必须把这个进程变成一个守护进程</p><p><strong>防止手机服务后台被杀死</strong><br>是不是在手机的设置界面看当前正在运行的服务时会发现有的APP不止存在一个服务？有的APP后台存在两个，有的存在三个？有的流氓软件也会这么设置，这样的话就可以一直运行在后台，用户你关也关不了（倒不是说所有这么设置的都是流氓软件，因为有的软件需要保持一个长期的后台在线，这是由功能决定的）。</p><p>这里有两种方法（可能还有更多，这里只总结我了解的）：</p><ul><li>第一种方法就是利用android中service的特性来设置，防止手机服务后台被杀死。通过更改onStartCommand方法的返回值，将service设置为粘性service，那么当service被kill的时候就会将服务的状态返回到最开始启动的状态，也就是运行的状态，所以这个时候也就会再次重新运行。但是需要注意一点，这个时候的intent值就为空了，获取的话需要注意一下这一点。</li><li>第二种就是fork出一个C的进程，因为在Linux中，子类进程在父类被杀死销毁的时候不会随之杀死，它会被init进程领养。所以也就可以使用这一个方法，利用主进程fork出一个C进程在后台运行，一旦检测到服务被杀死（检测的方式多种，可使用观察者模式，广播，轮询等等），就重启服务即可</li></ul><p><strong>IPC通信</strong><br>上面总结了进程的相关基础，这里就开始总结一下进程间通信（IPC<br>）的问题了。<br>现在Linux现有的所有IPC方式：</p><ol><li>管道：在创建时分配一个page大小的内存，缓存区大小有限</li><li>消息队列：信息复制两次，额外的cpu消耗，不适合频繁或信息量大的通信</li><li>共享内存：无需复制，共享缓冲区直接附加到进程虚拟地址控件，速度是在所有IPC通信中最快的。但是进程间的同步问题操作系统无法实现，必须由各进程利用同步工具解决。</li><li>Socket：作为更通用的接口，传输效率低，主要用于不通机器或跨网络的通信</li><li>信号量：常作为一种锁机制。</li><li>信号：不适用于信息交换，更适用于进程件中断控制，例如kill process</li></ol><p>到了这里，就有了问题，为什么在Linux已经存在这么多优良的IPC方案时，Android还要采取一种新的Binder机制呢？<br><strong>猜测</strong>：我觉得Android采用这种新的方式（当然也大面积的同时使用Linux的IPC通信方式），最多两个原因：</p><ol><li>推广时手机厂商自定义ROM底层的保密性或者公司之间的关系。</li><li>在某些情况下更适合手机这种低配置，对效率要求极高，用户体验极其重要的设备</li></ol><p><strong>资料</strong></p><p>对于Binder来说，存在着以下的优势：</p><ul><li><strong>性能角度</strong>：Binder的数据拷贝只需要一次，而管道、消息队列、Socket都需要2次，而共享内存是一次都不需要拷贝，因此Binder的性能仅次于共享内存</li><li><strong>稳定性来说</strong>：Binder是基于C/S架构的，也就是Client和Server组成的架构，Client端有什么需求，直接发送给Server端去完成，架构清晰，分工明确。而共享内存的实现方式复杂，需要充分考虑访问临界资源的并发同步问题，否则可能会出现死锁等问题。从稳定性来说，Binder的架构优于共享内存。</li><li><strong>从安全的角度</strong>：Linux的传统IPC方式的接收方无法获得对方进程可靠的UID（用户身份证明）/PID（进程身份证明），从而无法鉴别对方身份，而Android是一个对安全性能要求特别高的操作系统，在系统层面需要对每一个APP的权限进行管控或者监视，对于普通用户来说，绝对不希望从App商店下载偷窥隐射数据、后台造成手机耗电等问题。传统的Linux IPC无任何保护措施，完全由上层协议来确保。而在Android中，操作系统为每个安装好的应用程序分配了自己的UID，通过这个UID可以鉴别进程身份。同时Android系统对外只暴露Client端，Client端将任务发送给Server端，Server端会根据权限控制策略判断UID/PID是否满足访问权限。也就是说Binder机制对于通信双方的身份是内核进行校验支持的。例如Socket方式只需要指导地址就可以连接，他们的安全机制需要上层协议来假设</li><li><strong>从语言角度</strong>：Linux是基于C的，而Android是基于Java的，而Binder是符合面向对象思想的。它的实体位于一个进程中，而它的引用遍布与系统的各个进程之中，它是一个跨进程引用的对象，模糊了进程边界，淡化了进程通信的过程，整个系统仿佛运行于同一个面向对象的程序之中。</li><li><strong>从公司角度</strong>：Linux内核是开源的，GPL协议保护，受它保护的Linux Kernel是运行在内核控件，对于上层的任何类库、服务等只要进行系统调用，调用到底层Kernel，那么也必须遵循GPL协议。而对于Android来说，Google巧妙地将GPL协议控制在内核控件，将用户控件的协议采用Apache-2.0协议（允许基于Android的开发商不向社区反馈源码）。</li></ul><h2 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h2><p>刚才谈到Binder的时候提了一下效率的问题，那这里就不得不讲到反射了。</p><p>反射它允许一个类在运行过程中获得任意类的任意方法，这个是Java语言的一个很重要的特性。它方便了程序员的编写，但是降低了效率。</p><p>实际上，对于只要不是特别大的项目（非Android），反射对于效率的影响微乎其微，而与之对比的开发成本来说就更划算了。<br>但是，Android是一个用于手机的，它的硬件设施有限，我们必须要考虑到它的这个因素，用户体验是最重要的。以前看到过国外的一项统计。在一个APP中的Splash中使用了反射，结果运行时间增加了一秒，这个已经算是很严重的效率影响了。</p><p><strong>为什么反射影响效率呢</strong><br>这里就需要提到一个东西，JIT编译器。JIT编译器它可以把字节码文件转换为机器码，这个是可以直接让处理器使用的，经过它处理的字节码效率提升非常大，但是它有一个缺点，就是把字节码转换成机器码的过程很慢，有的时候甚至还超过了不转换的代码效率（转换之后存在一个复用的问题，对于转换了的机器码，使用的次数越多就越值的）。因此，在JVM虚拟机中，也就产生了一个机制，把常用的、使用频率高的字节码通过JIT编译器转换，而频率低的就不管它。而反射的话则是直接越过了JIT编译器，不管是常用的还是非常用的字节码一律没有经过JIT编译器的转化，所以效率就会低。<br>而在Android里面，5.0之前使用的是Davlik虚拟机，它就是上面的机制，而在Android5.0之后Google使用了一个全新的ART虚拟机全面代替Davlik虚拟机。<br>ART虚拟机会在程序安装时直接把所有的字节码全部转化为机器码，虽然这样会导致安装时间边长，但是程序运行的效率提升非常大。<br><strong>【疑问：那在Android5.0之后的系统上，反射会不会没影响了？由于现在做项目的时候更多考虑的是向下兼容，单独考虑5.0的情况还没有，等以后有需求或者是有机会的时候再深入了解一下，以后更新】</strong></p><h2 id="继续断点4"><a href="#继续断点4" class="headerlink" title="继续断点4"></a>继续断点4</h2><p>刚才总结了Android的消息处理机制和IPC通信，那么我们主线程的消息处理机制是什么时候开始的呢？因为我们知道在主线程中我们是不需要手动调用Looper.prepare()和Looper.loop()的。</p><p>Android的主线程就是ActivityThread，主线程的入口方法是main方法，在main方法中系统会通过Looper.prepareMainLooper()来创建主线程的Looper以及MessageQueue，并通过Looper.loop来开启消息循环，所以这一步实际上是系统已经为我们做了，我们就不再需要自己来做。<br>ActivityThread通过AppplicationThread和AMS进行进程件通信，AMS以进程间通信的方式完成ActivityThread的请求后会回调ApplicationThread中的Binder方法，然后ApplicationThread会向Handler发送消息，Handler收到消息后会将ApplicationThread中的逻辑切换到主线程中去执行，这个过程就是主线程的消息循环模型。</p><p>上面总结到了APP开始运行，依次调用onCreate/onStart/onResume等方法，那么在onCreate方法中我们经常使用的setContentView和findViewById做了什么事呢？</p><p>Activity界面显示<br>-<br>首先，就考虑到第一个问题，也就是setContentView这个东西做了什么事，这里就要对你当前继承的Activity分类了，如果是继承的Activity，那么setContentView源码是这样的：</p><figure class="highlight leaf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * Set the activity content from a layout resource.  The resource will be</span><br><span class="line"> * inflated, adding all top-level views to the activity.</span><br><span class="line"> *</span><br><span class="line"> * @param layoutResID Resource ID to be inflated.</span><br><span class="line"> *</span><br><span class="line"> * @see <span class="function"><span class="keyword">#</span><span class="title">setContentView</span><span class="params">(<span class="variable">android</span>.<span class="variable">view</span>.<span class="variable">View</span>)</span></span></span><br><span class="line"> * @see <span class="function"><span class="keyword">#</span><span class="title">setContentView</span><span class="params">(<span class="variable">android</span>.<span class="variable">view</span>.<span class="variable">View</span>, <span class="variable">android</span>.<span class="variable">view</span>.<span class="variable">ViewGroup</span>.<span class="variable">LayoutParams</span>)</span></span></span><br><span class="line"> */</span><br><span class="line">public void setContentView(@LayoutRes int layoutResID) &#123;</span><br><span class="line">    getWindow().setContentView(layoutResID);</span><br><span class="line">    initWindowDecorActionBar();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * Set the activity content to an explicit view.  This view is placed</span><br><span class="line"> * directly into the activity's view hierarchy.  It can itself be a complex</span><br><span class="line"> * view hierarchy.  When calling this method, the layout parameters of the</span><br><span class="line"> * specified view are ignored.  Both the width and the height of the view are</span><br><span class="line"> * set by default to &#123;@link ViewGroup.LayoutParams#MATCH_PARENT&#125;. To use</span><br><span class="line"> * your own layout parameters, invoke</span><br><span class="line"> * &#123;@link <span class="function"><span class="keyword">#</span><span class="title">setContentView</span><span class="params">(<span class="variable">android</span>.<span class="variable">view</span>.<span class="variable">View</span>, <span class="variable">android</span>.<span class="variable">view</span>.<span class="variable">ViewGroup</span>.<span class="variable">LayoutParams</span>)</span></span>&#125;</span><br><span class="line"> * instead.</span><br><span class="line"> *</span><br><span class="line"> * @param view The desired content to display.</span><br><span class="line"> *</span><br><span class="line"> * @see <span class="function"><span class="keyword">#</span><span class="title">setContentView</span><span class="params">(<span class="variable">int</span>)</span></span></span><br><span class="line"> * @see <span class="function"><span class="keyword">#</span><span class="title">setContentView</span><span class="params">(<span class="variable">android</span>.<span class="variable">view</span>.<span class="variable">View</span>, <span class="variable">android</span>.<span class="variable">view</span>.<span class="variable">ViewGroup</span>.<span class="variable">LayoutParams</span>)</span></span></span><br><span class="line"> */</span><br><span class="line">public void setContentView(View view) &#123;</span><br><span class="line">    getWindow().setContentView(view);</span><br><span class="line">    initWindowDecorActionBar();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * Set the activity content to an explicit view.  This view is placed</span><br><span class="line"> * directly into the activity's view hierarchy.  It can itself be a complex</span><br><span class="line"> * view hierarchy.</span><br><span class="line"> *</span><br><span class="line"> * @param view The desired content to display.</span><br><span class="line"> * @param params Layout parameters for the view.</span><br><span class="line"> *</span><br><span class="line"> * @see <span class="function"><span class="keyword">#</span><span class="title">setContentView</span><span class="params">(<span class="variable">android</span>.<span class="variable">view</span>.<span class="variable">View</span>)</span></span></span><br><span class="line"> * @see <span class="function"><span class="keyword">#</span><span class="title">setContentView</span><span class="params">(<span class="variable">int</span>)</span></span></span><br><span class="line"> */</span><br><span class="line">public void setContentView(View view, ViewGroup.LayoutParams params) &#123;</span><br><span class="line">    getWindow().setContentView(view, params);</span><br><span class="line">    initWindowDecorActionBar();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里面存在着3个重载函数，而不管你调用哪一个，最后都会调用到initWindowDecorActionBar()这个方法。<br>而对于新的一个AppcompatActivity，这个Activity里面包含了一些新特性，现在我做的项目里基本都是使用AppcompatActivity代替掉原来的Activity，当然也并不是一定的，还是要根据项目的实际情况来选择。<br>在AppcompatActivity中，setContentView是这样的：</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">@Override</span></span><br><span class="line">   public void setContentView(<span class="variable">@LayoutRes</span> int layoutResID) &#123;</span><br><span class="line">       <span class="selector-tag">getDelegate</span>()<span class="selector-class">.setContentView</span>(layoutResID);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   @<span class="selector-tag">Override</span></span><br><span class="line">   <span class="selector-tag">public</span> <span class="selector-tag">void</span> <span class="selector-tag">setContentView</span>(View view) &#123;</span><br><span class="line">       <span class="selector-tag">getDelegate</span>()<span class="selector-class">.setContentView</span>(view);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   @<span class="selector-tag">Override</span></span><br><span class="line">   <span class="selector-tag">public</span> <span class="selector-tag">void</span> <span class="selector-tag">setContentView</span>(View view, ViewGroup.LayoutParams params) &#123;</span><br><span class="line">       <span class="selector-tag">getDelegate</span>()<span class="selector-class">.setContentView</span>(view, params);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>一样的3个重载函数，只是里面没有了上面的那个init方法，取而代之的是一个getDelegate().setContentView，这个delegate从字面上可以了解到它是一个委托的对象，源码是这样的：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span> The &#123;<span class="doctag">@link</span> AppCompatDelegate&#125; being used by this Activity.</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="meta">@NonNull</span></span><br><span class="line">   <span class="keyword">public</span> AppCompatDelegate getDelegate() &#123;</span><br><span class="line">       <span class="keyword">if</span> (mDelegate == <span class="literal">null</span>) &#123;</span><br><span class="line">           mDelegate = AppCompatDelegate.create(<span class="keyword">this</span>, <span class="keyword">this</span>);</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> mDelegate;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>而在AppCompatDelegate.Create方法中，则会返回一个很有意思的东西：</p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Create a &#123;<span class="doctag">@link</span> android.support.v7.app.AppCompatDelegate&#125; to use with &#123;<span class="doctag">@code</span> activity&#125;.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> callback An optional callback for AppCompat specific events</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="function">AppCompatDelegate <span class="title">create</span><span class="params">(Activity activity, AppCompatCallback callback)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> create(activity, activity.getWindow(), callback);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> AppCompatDelegate create(Context context, Window window,</span><br><span class="line">            AppCompatCallback callback) &#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> sdk = Build.VERSION.SDK_INT;</span><br><span class="line">        <span class="keyword">if</span> (sdk &gt;= <span class="number">23</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> AppCompatDelegateImplV23(context, window, callback);</span><br><span class="line">        &#125; <span class="function"><span class="keyword">else</span> <span class="title">if</span> <span class="params">(sdk &gt;= <span class="number">14</span>)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> AppCompatDelegateImplV14(context, window, callback);</span><br><span class="line">        &#125; <span class="function"><span class="keyword">else</span> <span class="title">if</span> <span class="params">(sdk &gt;= <span class="number">11</span>)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> AppCompatDelegateImplV11(context, window, callback);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> AppCompatDelegateImplV7(context, window, callback);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>这里会根据SDK的等级来返回不同的东西，这样的话就不深究了，底层的话我撇了一下，应该原理和Activity是一样的，可能存在一些区别。这里就用Activity来谈谈它的setContentView方法做了什么事。</p><p>在setContentView上面有段注释：</p><blockquote><p>Set the activity content from a layout resource. The resource will be inflated, adding all top-level views to the activity.</p></blockquote><p>这里就介绍了它的功能，它会按照一个布局资源去设置Activity的内容，而这个布局资源将会被引入然后添加所有顶级的Views到这个Activity当中。<br>这是个啥意思勒。<br>下面从网上扒了一张图：<br><img src="http://img.blog.csdn.net/20150604144532934" alt="dsa"><br>这里是整个Activity的层级，最外面一层是我们的Activity，它包含里面的所有东西。<br>再上一层是一个PhoneWindow，这个PhoneWindow是由Window类派生出来的，每一个PhoneWindow中都含有一个DecorView对象，Window是一个抽象类。<br>再上面一层就是一个DecorView，我理解这个DecorView就是一个ViewGroup，就是装View的。<br>而在DecoreView中，最上面的View就是我们的TitleActionBar，下面就是我们要设置的content。所以在上面的initWindowDecorActionBar就能猜到是什么意思了吧。</p><p>而在initWindowDecorActionBar方法中，有一段代码：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Creates a new ActionBar, locates the inflated ActionBarView,</span></span><br><span class="line"><span class="comment">    * initializes the ActionBar with the view, and sets mActionBar.</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">private</span> <span class="built_in">void</span> initWindowDecorActionBar() &#123;</span><br><span class="line">       Window <span class="built_in">window</span> = getWindow();</span><br><span class="line"></span><br><span class="line">       <span class="comment">// Initializing the window decor can change window feature flags.</span></span><br><span class="line">       <span class="comment">// Make sure that we have the correct set before performing the test below.</span></span><br><span class="line">       <span class="built_in">window</span>.getDecorView();</span><br><span class="line"></span><br><span class="line">       <span class="keyword">if</span> (isChild() || !<span class="built_in">window</span>.hasFeature(Window.FEATURE_ACTION_BAR) || mActionBar != <span class="literal">null</span>) &#123;</span><br><span class="line">           <span class="keyword">return</span>;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       mActionBar = <span class="keyword">new</span> WindowDecorActionBar(<span class="keyword">this</span>);</span><br><span class="line">       mActionBar.setDefaultDisplayHomeAsUpEnabled(mEnableDefaultActionBarUp);</span><br><span class="line"></span><br><span class="line">       mWindow.setDefaultIcon(mActivityInfo.getIconResource());</span><br><span class="line">       mWindow.setDefaultLogo(mActivityInfo.getLogoResource());</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>注意上面的window.getDecoreView（）方法的注释，该方法会设置一些window的标志位，而当这个方法执行完之后，就再也不能更改了，这也就是为什么很多第三方SDK设置window的标志位时一定要求要在setContentView方法前调用。</p><h2 id="findViewById"><a href="#findViewById" class="headerlink" title="findViewById"></a>findViewById</h2><p>我们通过一个findViewById方法可以实现对象的绑定，那它底层究竟是怎么实现的呢？</p><p>findViewById根据继承的Activity类型的不同也存在着区别，老规矩，还是以Activity的来。</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Finds a view that was identified by the id attribute from the XML that</span></span><br><span class="line"><span class="comment">     * was processed in &#123;@link #onCreate&#125;.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * @return The view if found or null otherwise.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="variable">@Nullable</span></span><br><span class="line">    public View findViewById(<span class="variable">@IdRes</span> int id) &#123;</span><br><span class="line">        <span class="selector-tag">return</span> <span class="selector-tag">getWindow</span>()<span class="selector-class">.findViewById</span>(id);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>从源码来看，findViewById也是经过了一层层的调用，它的功能如同它上面的注释一样，通过一个view的id属性查找view，这里也可以看到一个熟悉的getWindow方法，说明findViewById()实际上Activity把它也是交给了自己的window来做</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Finds a view that was identified by the id attribute from the XML that</span></span><br><span class="line"><span class="comment">    * was processed in &#123;@link android.app.Activity#onCreate&#125;.  This will</span></span><br><span class="line"><span class="comment">    * implicitly call &#123;@link #getDecorView&#125; for you, with all of the</span></span><br><span class="line"><span class="comment">    * associated side-effects.</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * @return The view if found or null otherwise.</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="variable">@Nullable</span></span><br><span class="line">   public View findViewById(<span class="variable">@IdRes</span> int id) &#123;</span><br><span class="line">       <span class="selector-tag">return</span> <span class="selector-tag">getDecorView</span>()<span class="selector-class">.findViewById</span>(id);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>而在这里面，又调用了getDecorView的findViewById（）方法，这也相当于是一个层层传递的过程，因为DecorView我理解为就是一个ViewGroup，而当运行getDecorView().findViewById()方法时，就会运行View里面的findViewById方法。它会使用这个被给予的id匹配子View的Id，如果匹配，就返回这个View，完成View的绑定</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line">     * Look <span class="keyword">for</span> a child view <span class="keyword">with</span> <span class="keyword">the</span> <span class="keyword">given</span> <span class="built_in">id</span>.  If this view has <span class="keyword">the</span> <span class="keyword">given</span></span><br><span class="line">     * <span class="built_in">id</span>, <span class="literal">return</span> this view.</span><br><span class="line">     *</span><br><span class="line">     * @param <span class="built_in">id</span> The <span class="built_in">id</span> <span class="keyword">to</span> search <span class="keyword">for</span>.</span><br><span class="line">     * @<span class="literal">return</span> The view <span class="keyword">that</span> has <span class="keyword">the</span> <span class="keyword">given</span> <span class="built_in">id</span> <span class="keyword">in</span> <span class="keyword">the</span> hierarchy <span class="keyword">or</span> null</span><br><span class="line">     */</span><br><span class="line">    @Nullable</span><br><span class="line">    public final View findViewById(@IdRes int <span class="built_in">id</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">id</span> &lt; <span class="number">0</span>) &#123;</span><br><span class="line"><span class="built_in">            return</span> null;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="built_in">        return</span> findViewTraversal(<span class="built_in">id</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line">     * &#123;@hide&#125;</span><br><span class="line">     * @param <span class="built_in">id</span> <span class="keyword">the</span> <span class="built_in">id</span> <span class="keyword">of</span> <span class="keyword">the</span> view <span class="keyword">to</span> be found</span><br><span class="line">     * @<span class="literal">return</span> <span class="keyword">the</span> view <span class="keyword">of</span> <span class="keyword">the</span> specified <span class="built_in">id</span>, null <span class="keyword">if</span> cannot be found</span><br><span class="line">     */</span><br><span class="line">    protected View findViewTraversal(@IdRes int <span class="built_in">id</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">id</span> == mID) &#123;</span><br><span class="line"><span class="built_in">            return</span> this;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="built_in">        return</span> null;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>最后总结一下（Activity中），findViewById的过程是这样的：<br>Activity -&gt; Window -&gt; DecorView -&gt; View</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://www.zhihu.com/question/39440766#answer-31119460" target="_blank" rel="noopener">为什么Android要采用Binder作为IPC机制？</a></li><li><a href="http://blog.csdn.net/zhaokaiqiang1992/article/details/49428287" target="_blank" rel="noopener">【凯子哥带你学Framework】Activity启动过程全解析</a></li><li><a href="http://gityuan.com/" target="_blank" rel="noopener">Gityuan</a></li><li>《Android开发艺术探索》</li><li>《Linux程序设计》</li><li>《Linux内核剖析》</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;转载请注明出处&lt;br&gt;博客地址：imlzq.com&lt;br&gt;作者：李中权&lt;/p&gt;
&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;好久没有写博客了，瞬间感觉好多学了的东西不进行一个自我
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Test</title>
    <link href="http://yoursite.com/2018/02/11/Test/"/>
    <id>http://yoursite.com/2018/02/11/Test/</id>
    <published>2018-02-11T09:47:40.000Z</published>
    <updated>2018-02-11T09:47:40.055Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://yoursite.com/2018/02/11/%E4%B8%89%E7%BA%A7%E7%BC%93%E5%AD%98%20Volley%20:Lrucache:DiskLrucache%20+%20AndroidStudio%E5%AF%BC%E5%87%BAjar%E5%8C%85%20+%20upload%20to%20github/"/>
    <id>http://yoursite.com/2018/02/11/三级缓存 Volley :Lrucache:DiskLrucache + AndroidStudio导出jar包 + upload to github/</id>
    <published>2018-02-11T09:45:00.281Z</published>
    <updated>2018-02-11T09:45:00.282Z</updated>
    
    <content type="html"><![CDATA[<p>　　想了半天都没想出来写什么作为第一篇博客比较好，突然发现这次项目的版本控制是github，三级缓存和屏幕适配又是一个跑不掉的话题，就以这些话题开始我的博客之旅吧，同时总结一下在AndroidStudio中如何导出jar包。<br>​    </p><pre><code>([参考郭霖的blog](http://blog.csdn.net/guolin_blog/article/details/28863651))([参考李晨玮的blog](http://www.cnblogs.com/lichenwei)/)不管是提升用户体验还是提升APP的流畅度，三级缓存都是必不可少的，在这里就先总结一下三级缓存的使用。</code></pre><p>　　加载网络图片时，使用三级缓存可以有效的提高用户体验以及程序的流畅度。<br>　　三级缓存为以下内容：网络层／内存层／磁盘层<br>　　缓存的流程如下：<br>　　１. 网络层下载图片 Volley-&gt;imageLoader<br>　　２. 存入内存层 LruCache<br>　　３. 存入磁盘层 DiskLruCache<br>　　而当以上操作均完成以后，此次下载的图片就写入到了手机中，下次运行程序时，就会优先到目录中查找是否存在该图片，如果存在就直接使用，免除了多次加载耗费流量。<br>        首先，在使用之前，包含volley的库以及DiskLrucache,　链接如下<br>        <a href="http://download.csdn.net/detail/jonstank2013/9293561" target="_blank" rel="noopener">volley</a><br>        <a href="http://download.csdn.net/detail/jonstank2013/9293555" target="_blank" rel="noopener">DiskLrucache</a></p><p>   　１.　定义MyApplication,　在其中获取到context，避免每次都需要单独获取一次上下文对象。<br>   　在MyApplication中设置有一个静态的TAG,这个TAG是为了获取基础类的名称，以此作为每一个加入RequestQueue的request的标志</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.mylibs.volley_disklrucache_lrucache.customview;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.app.<span class="type">Application</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by lizhongquan on 15-11-23.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">MyApplication</span> <span class="keyword">extends</span> <span class="title">Application</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Application</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    public static <span class="type">MyApplication</span> myApplication;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Get Tag to setTag for everyAty</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    public static <span class="type">String</span> <span class="type">TAG</span>;</span><br><span class="line"></span><br><span class="line">    public static <span class="type">MyApplication</span> getMyApplication() &#123;</span><br><span class="line">        <span class="keyword">return</span> myApplication;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    public void onCreate() &#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate();</span><br><span class="line"></span><br><span class="line">        myApplication = <span class="keyword">this</span>;</span><br><span class="line">        <span class="type">TAG</span> = <span class="keyword">this</span>.getClass().getSimpleName();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后在AndroidManifest文件中声明：　</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="built_in">application</span></span><br><span class="line">        android:<span class="built_in">name</span>=<span class="string">".customview.MyApplication"</span> &gt;</span><br><span class="line">&lt;/<span class="built_in">application</span>&gt;</span><br></pre></td></tr></table></figure><p>同样的，为了避免重复编写，将各种工具类进行单独的封装</p><p>在Volley中，存在一个RequestQueue就可以了，其他所有的请求都直接放在这个队列中</p><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.mylibs.volley_disklrucache_lrucache.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.android.volley.Request;</span><br><span class="line"><span class="keyword">import</span> com.android.volley.RequestQueue;</span><br><span class="line"><span class="keyword">import</span> com.android.volley.toolbox.Volley;</span><br><span class="line"><span class="keyword">import</span> com.mylibs.volley_disklrucache_lrucache.customview.MyApplication;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by lizhongquan on 15-11-23.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> class VolleyRequestQueue &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * get RequestQueue</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> RequestQueue mRequestQueue = Volley.newRequestQueue(MyApplication.getMyApplication());</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * add request</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> addRequest(Request&lt;?&gt; request, <span class="keyword">Object</span> tag)&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> != tag)&#123;</span><br><span class="line">            request.setTag(tag);</span><br><span class="line">        &#125;</span><br><span class="line">        mRequestQueue.<span class="built_in">add</span>(request);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * cancel all request</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> cancelRequest(<span class="keyword">Object</span> tag)&#123;</span><br><span class="line">        mRequestQueue.cancelAll(tag);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>　　　　　　　<img src="http://img.blog.csdn.net/20140804233158296?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvZ3VvbGluX2Jsb2c=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="journal内容"><br>对于DiskLruCache,　他是在手机的保存目录中创建一个journal文件，在此文件中有如下内容：<br>第一行是个固定的字符串“libcore.io.DiskLruCache”，标志着我们使用的是DiskLruCache技术。<br>第二行是DiskLruCache的版本号，这个值是恒为1。<br>第三行是应用程序的版本号，我们在open()方法里传入的版本号是什么这里就会显示什么。<br>第四行是valueCount，这个值也是在open()方法中传入的，通常情况下都为1。<br>第五行是一个空行。<br>前五行也被称为journal文件的头。<br>第六行是以一个DIRTY前缀开始的，后面紧跟着缓存图片的key。通常我们看到DIRTY这个字样都不代表着什么好事情，意味着这是一条脏数据。每当我们调用一次DiskLruCache的edit()方法时，都会向journal文件中写入一条DIRTY记录，表示我们正准备写入一条缓存数据，但不知结果如何。然后调用commit()方法表示写入缓存成功，这时会向journal中写入一条CLEAN记录，意味着这条“脏”数据被“洗干净了”，调用abort()方法表示写入缓存失败，这时会向journal中写入一条REMOVE记录。也就是说，每一行DIRTY的key，后面都应该有一行对应的CLEAN或者REMOVE的记录，否则这条数据就是“脏”的，会被自动删除掉。<br>第七行的那条记录，除了CLEAN前缀和key之外，后面还有一个152313，这是什么意思呢？其实，DiskLruCache会在每一行CLEAN记录的最后加上该条缓存数据的大小，以字节为单位。152313也就是缓存的图片的字节数了，换算出来大概是148.74K，和缓存图片刚刚好一样大。</p><p>以上的一段话包括图片均来自郭霖的博客。</p><p>同时，由上可以看出，我们必须对每一个文件名创建一个独立的文件名，比较推荐的一种方式是利用MD5转换。<br>这个工具类没有好介绍的，直接拿来用就可以了</p><p>MD5的工具类：<br><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.mylibs.volley_disklrucache_lrucache.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.math.BigInteger;</span><br><span class="line"><span class="keyword">import</span> java.security.MessageDigest;</span><br><span class="line"><span class="keyword">import</span> java.security.NoSuchAlgorithmException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by lizhongquan on 15-11-23.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MD5Util</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Encrypt the information by MD5</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">String</span> md5(<span class="keyword">String</span> plainText) &#123;</span><br><span class="line">        byte[] secretBytes = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            secretBytes = MessageDigest.getInstance(<span class="string">"md5"</span>).digest(</span><br><span class="line">                    plainText.getBytes());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchAlgorithmException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="type">RuntimeException</span>(<span class="string">"no md5！"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 16 Band</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">String</span> md5code = <span class="keyword">new</span> <span class="type">BigInteger</span>(<span class="number">1</span>, secretBytes).toString(<span class="number">16</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * If number.lenth &lt; 32, add 0 in its front</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">for</span> (int i = <span class="number">0</span>; i &lt; <span class="number">32</span> - md5code.length(); i++) &#123;</span><br><span class="line">            md5code = <span class="string">"0"</span> + md5code;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> md5code;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>之后，开始准备Volley的ImageLoader的图片缓存类ImageCacheUtil</p><p>图片缓存类包含的内容如下：<br>１．在它的构造方法中设置LruCache的最大缓存，首先获取到可用内存的最大值，使用内存如果超过这个值会引起OutOfMemory异常<br>２．使用最大可用内存值的1/8作为缓存的大小<br>３．从LruCache或者DiskLruCache中取出Bitmap, 对于DiskCache来说，首先会利用经MD5转换后的唯一名来进行查找，如果找到，就取出相关的资源<br>４．保存资源到LruCache或DiskLruCache中。对于DiskLruCache而言，同样是先检测后操作<br>５．获取磁盘的缓存地址。一般而言，缓存的地址会存放在 /sdcard/Android/data/<application package="">/cache 这个路径下，但是有的手机是没有SD卡的，因此需要进行一个判断。如果存在，使用getExternalCacheDir()方法来获取缓存路径，否则就调用getCacheDir()方法来获取缓存路径。前者获取到的是/sdcard/Android/data/<application package="">/cache ，后者获取到的是 /data/data/<application package="">/cache<br>６．获取应用程序的版本号。由于DiskLruCache的设置，所以只要我们APP的版本号改变了，缓存路径下存储的数据都会被清楚，因为DiskLruCache认为当应用程序有版本更新的时候，所有数据都应从网上重新获取。</application></application></application></p><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.mylibs.volley_disklrucache_lrucache.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.content.Context;</span><br><span class="line"><span class="keyword">import</span> android.content.pm.PackageInfo;</span><br><span class="line"><span class="keyword">import</span> android.content.pm.PackageManager;</span><br><span class="line"><span class="keyword">import</span> android.graphics.Bitmap;</span><br><span class="line"><span class="keyword">import</span> android.graphics.BitmapFactory;</span><br><span class="line"><span class="keyword">import</span> android.os.Environment;</span><br><span class="line"><span class="keyword">import</span> android.support.v4.util.LruCache;</span><br><span class="line"><span class="keyword">import</span> android.util.Log;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.android.volley.toolbox.ImageLoader;</span><br><span class="line"><span class="keyword">import</span> com.mylibs.volley_disklrucache_lrucache.DiskLruCache;</span><br><span class="line"><span class="keyword">import</span> com.mylibs.volley_disklrucache_lrucache.customview.MyApplication;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.OutputStream;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by lizhongquan on 15-11-23.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> class ImageCacheUtil implements ImageLoader.ImageCache &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// get Tag</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">String</span> TAG = ImageCacheUtil.<span class="keyword">this</span>.getClass().getSimpleName();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// LruCache / DiskLruCache</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> LruCache&lt;<span class="keyword">String</span>, Bitmap&gt; mLruCache;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> DiskLruCache mDiskLruCache;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// DiskMaxSize</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="built_in">int</span> DISKMAXSIZE = <span class="number">10</span> * <span class="number">1024</span> * <span class="number">1024</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> ImageCacheUtil() &#123;</span><br><span class="line">        <span class="comment">// get 1/8 of memory to Cache</span></span><br><span class="line">        <span class="built_in">int</span> maxSize = (<span class="built_in">int</span>) (Runtime.getRuntime().maxMemory() / <span class="number">8</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Instance LruCaceh对象</span></span><br><span class="line">        mLruCache = <span class="keyword">new</span> LruCache&lt;<span class="keyword">String</span>, Bitmap&gt;(maxSize) &#123;</span><br><span class="line">            @Override</span><br><span class="line">            <span class="keyword">protected</span> <span class="built_in">int</span> sizeOf(<span class="keyword">String</span> <span class="built_in">key</span>, Bitmap bitmap) &#123;</span><br><span class="line">                <span class="keyword">return</span> bitmap.getRowBytes() * bitmap.getHeight();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// get DiskLruCahce</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            mDiskLruCache = DiskLruCache.<span class="built_in">open</span>(getDiskCacheDir(</span><br><span class="line">                    MyApplication.getMyApplication(), <span class="string">"DiskLruCache"</span>),</span><br><span class="line">                    getAppVersion(MyApplication.getMyApplication()), <span class="number">1</span>, DISKMAXSIZE);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * getBitmap from LruCache or diskLruCache</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    @Override</span><br><span class="line">    <span class="keyword">public</span> Bitmap getBitmap(<span class="keyword">String</span> url) &#123;</span><br><span class="line">        <span class="keyword">if</span> (mLruCache.<span class="built_in">get</span>(url) != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">// get from LruCache</span></span><br><span class="line">            Log.i(TAG, <span class="string">"get from LruCache"</span>);</span><br><span class="line">            <span class="keyword">return</span> mLruCache.<span class="built_in">get</span>(url);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">String</span> <span class="built_in">key</span> = MD5Util.md5(url);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (mDiskLruCache.<span class="built_in">get</span>(<span class="built_in">key</span>) != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="comment">// get from DiskLruCache</span></span><br><span class="line">                    DiskLruCache.Snapshot snapshot = mDiskLruCache.<span class="built_in">get</span>(<span class="built_in">key</span>);</span><br><span class="line">                    Bitmap bitmap = <span class="keyword">null</span>;</span><br><span class="line">                    <span class="keyword">if</span> (snapshot != <span class="keyword">null</span>) &#123;</span><br><span class="line">                        bitmap = BitmapFactory.decodeStream(snapshot.getInputStream(<span class="number">0</span>));</span><br><span class="line">                        <span class="comment">// save into LruCache</span></span><br><span class="line">                        mLruCache.put(url, bitmap);</span><br><span class="line">                        Log.i(TAG, <span class="string">"get from diskLruCache"</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">return</span> bitmap;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * save into LruCache or DiskLruCache</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    @Override</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> putBitmap(<span class="keyword">String</span> url, Bitmap bitmap) &#123;</span><br><span class="line">        <span class="comment">// save into LruCache</span></span><br><span class="line">        mLruCache.put(url, bitmap);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// get the uniqueName</span></span><br><span class="line">        <span class="keyword">String</span> <span class="built_in">key</span> = MD5Util.md5(url);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// Judge if the DiskLruCache exists</span></span><br><span class="line">            <span class="comment">// If not, save into DiskLruCache</span></span><br><span class="line">            <span class="keyword">if</span> (mDiskLruCache.<span class="built_in">get</span>(<span class="built_in">key</span>) == <span class="keyword">null</span>) &#123;</span><br><span class="line">                DiskLruCache.Editor editor = mDiskLruCache.edit(<span class="built_in">key</span>);</span><br><span class="line">                <span class="keyword">if</span> (editor != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    OutputStream outputStream = editor.newOutputStream(<span class="number">0</span>);</span><br><span class="line">                    <span class="keyword">if</span> (bitmap.compress(Bitmap.CompressFormat.JPEG, <span class="number">100</span>, outputStream)) &#123;</span><br><span class="line">                        editor.commit();</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        editor.abort();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                mDiskLruCache.flush();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Judge the SDCard is exits or not and then choose the DiskLruCacheDir</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * @param context context</span></span><br><span class="line"><span class="comment">     * @param uniqueName the name of cache</span></span><br><span class="line"><span class="comment">     * @return The cachePath</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> File getDiskCacheDir(Context context, <span class="keyword">String</span> uniqueName) &#123;</span><br><span class="line">        <span class="keyword">String</span> cachePath;</span><br><span class="line">        <span class="keyword">if</span> (Environment.MEDIA_MOUNTED.equals(Environment.getExternalStorageState())</span><br><span class="line">                || !Environment.isExternalStorageRemovable()) &#123;</span><br><span class="line">            cachePath = context.getExternalCacheDir().getPath();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            cachePath = context.getCacheDir().getPath();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> File(cachePath + File.separator + uniqueName);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * getAppVersion</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * @param context</span></span><br><span class="line"><span class="comment">     * @return appVersion</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> getAppVersion(Context context) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            PackageInfo info = context.getPackageManager().getPackageInfo(context.getPackageName(), <span class="number">0</span>);</span><br><span class="line">            <span class="keyword">return</span> info.versionCode;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (PackageManager.NameNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>图片缓存管理类ImageCacheManager<br>向外部提供一个loadImage的重载方法，一个传入加载图片的宽高，一个默认加载原图，使外部不再需要关注任何关于缓存的操作</p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.mylibs.volley_disklrucache_lrucache.customview;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.graphics.Bitmap;</span><br><span class="line"><span class="keyword">import</span> android.widget.ImageView;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.android.volley.VolleyError;</span><br><span class="line"><span class="keyword">import</span> com.android.volley.toolbox.ImageLoader;</span><br><span class="line"><span class="keyword">import</span> com.mylibs.volley_disklrucache_lrucache.utils.ImageCacheUtil;</span><br><span class="line"><span class="keyword">import</span> com.mylibs.volley_disklrucache_lrucache.utils.VolleyRequestQueue;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by lizhongquan on 15-11-23.</span></span><br><span class="line"><span class="comment"> * ImageCacheManager</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ImageCacheManager</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String TAG = ImageCacheManager.class.getSimpleName();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// get ImageCache</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> ImageLoader.ImageCache mImageCache = <span class="keyword">new</span> ImageCacheUtil();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// get ImageLoader</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> ImageLoader mImageLoader = <span class="keyword">new</span> ImageLoader(</span><br><span class="line">            VolleyRequestQueue.mRequestQueue, mImageCache);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * ImageListener</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> imageView    ImageView</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> defaultImage defaultImage</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> errorImage   errorImage</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span>　new ImageLoader.ImageListener</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> ImageLoader.ImageListener getImageListener(<span class="keyword">final</span> ImageView imageView,</span><br><span class="line">                                                             <span class="keyword">final</span> Bitmap defaultImage,</span><br><span class="line">                                                             <span class="keyword">final</span> Bitmap errorImage) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ImageLoader.ImageListener() &#123;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">onErrorResponse</span><span class="params">(VolleyError <span class="keyword">error</span>)</span> </span>&#123;</span><br><span class="line">                <span class="comment">// Error</span></span><br><span class="line">                <span class="keyword">if</span> (errorImage != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    imageView.setImageBitmap(errorImage);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">onResponse</span><span class="params">(ImageLoader.ImageContainer response, <span class="keyword">boolean</span> isImmediate)</span> </span>&#123;</span><br><span class="line">                <span class="comment">// Success</span></span><br><span class="line">                <span class="keyword">if</span> (response.getBitmap() != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    imageView.setImageBitmap(response.getBitmap());</span><br><span class="line">                &#125; <span class="function"><span class="keyword">else</span> <span class="title">if</span> <span class="params">(defaultImage != <span class="keyword">null</span>)</span> </span>&#123;</span><br><span class="line">                    imageView.setImageBitmap(defaultImage);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Method to LoadImage</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> url          URL</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> imageView    ImageView</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> defaultImage defaultImage</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> errorImage   errorImage</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> loadImage(String url, ImageView imageView, Bitmap defaultImage,</span><br><span class="line">                                 Bitmap errorImage) &#123;</span><br><span class="line">        mImageLoader.get(url, ImageCacheManager.getImageListener(imageView,</span><br><span class="line">                defaultImage, errorImage), <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Method to LoadImage</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> url          URL</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> imageView    ImageView</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> defaultImage defaultImage</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> errorImage   errorImage</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> maxWidth     maxWidth</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> maxHeight    maxHeight</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> loadImage(String url, ImageView imageView, Bitmap defaultImage,</span><br><span class="line">                                 Bitmap errorImage, <span class="keyword">int</span> maxWidth, <span class="keyword">int</span> maxHeight) &#123;</span><br><span class="line">        mImageLoader.get(url, ImageCacheManager.getImageListener(imageView, defaultImage,</span><br><span class="line">                errorImage), maxWidth, maxHeight);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Method to getBitmapFromRes</span></span><br><span class="line"><span class="comment">     * It's connected to the Method loadImage</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> context</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> resId</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> </span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="function">Bitmap <span class="title">getBitmapFromRes</span><span class="params">(Context context, <span class="keyword">int</span> resId)</span> </span>&#123;</span><br><span class="line">        Resources res = context.getResources();</span><br><span class="line">        <span class="function"><span class="keyword">return</span> BitmapFactory.<span class="title">decodeResource</span><span class="params">(res, resId)</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>MainActivity.java<br>activty_main.xml中只包含一个TextView 和一个ImageView<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.mylibs.volley_disklrucache_lrucache.testaty;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.os.<span class="type">Bundle</span>;</span><br><span class="line"><span class="keyword">import</span> android.support.v7.app.<span class="type">AppCompatActivity</span>;</span><br><span class="line"><span class="keyword">import</span> android.view.<span class="type">View</span>;</span><br><span class="line"><span class="keyword">import</span> android.widget.<span class="type">ImageView</span>;</span><br><span class="line"><span class="keyword">import</span> android.widget.<span class="type">TextView</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.mylibs.volley_disklrucache_lrucache.<span class="type">R</span>;</span><br><span class="line"><span class="keyword">import</span> com.mylibs.volley_disklrucache_lrucache.customview.<span class="type">ImageCacheManager</span>;</span><br><span class="line"><span class="keyword">import</span> com.mylibs.volley_disklrucache_lrucache.customview.<span class="type">MyApplication</span>;</span><br><span class="line"></span><br><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> void onCreate(<span class="type">Bundle</span> savedInstanceState) &#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(<span class="type">R</span>.layout.activity_main);</span><br><span class="line"></span><br><span class="line">        <span class="type">TextView</span> click = (<span class="type">TextView</span>) findViewById(<span class="type">R</span>.id.click);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> <span class="type">ImageView</span> imageView = (<span class="type">ImageView</span>) findViewById(<span class="type">R</span>.id.imageView);</span><br><span class="line"></span><br><span class="line">        click.setText(<span class="string">"click"</span>);</span><br><span class="line">        click.setOnClickListener(<span class="keyword">new</span> <span class="type">View</span>.<span class="type">OnClickListener</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            public void onClick(<span class="type">View</span> v) &#123;</span><br><span class="line">                <span class="type">String</span> address = <span class="string">"https://www.baidu.com/img/baidu_jgylogo3.gif"</span>;</span><br><span class="line">                <span class="type">ImageCacheManager</span>.loadImage(address,</span><br><span class="line">                        imageView,</span><br><span class="line">                        <span class="type">ImageCacheManager</span>.getBitmapFromRes(<span class="type">MyApplication</span>.getMyApplication(), <span class="type">R</span>.mipmap.ic_launcher),</span><br><span class="line">                        <span class="type">ImageCacheManager</span>.getBitmapFromRes(<span class="type">MyApplication</span>.getMyApplication(), <span class="type">R</span>.mipmap.ic_launcher));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="AndroidStudio导出jar包"><a href="#AndroidStudio导出jar包" class="headerlink" title="AndroidStudio导出jar包"></a>AndroidStudio导出jar包</h2><p>相关的代码及测试已经完毕，现在来生成一个jar包，方便以后使用</p><p>AndroidStudio下打包生成jar包有两种方式，一种是在build.gradle中编写代码导出，一种是直接在终端中导出。<br>网上很多推荐在build.gradle中编写导出的，但是就我而言还是比较喜欢直接在终端导出，毕竟终端自己用得多一点</p><p>首先， ./gradlew clean build  这一步之前是需要确定已经安装了gradlew的，如果没有安装的话，最好翻墙安装，不然会装很久</p><p>之后打开终端，输入：jar cvf libs_volley_lrucache_disklrucache.jar -C  /home/lizhongquan/AndroidStudioWorkplace/Volley_DiskLrucache_Lrucache/app/build/intermediates/classes/release .</p><p>最后一排的路径可以直接右键/app/build/intermediates/classes/release获得</p><p>最后回车，就可以在目录下看到生成的jar包了.</p><h2 id="上传到github"><a href="#上传到github" class="headerlink" title="上传到github"></a>上传到github</h2><p>由于此次项目的版本控制工具选择了github(git.oschina.net)，　所以在这里也记录一下github的相关操作<br>此次代码上传的位置：<a href="https://github.com/LiZHongquan2013/Libs_VolleyDiskLruCacheLruCache.git" target="_blank" rel="noopener">https://github.com/LiZHongquan2013/Libs_VolleyDiskLruCacheLruCache.git</a></p><p>首先，创建一个仓库</p><p>git init .<br>git add .<br>git commit -m “libs_volley_lrucache_disklrucache”<br>git remote add origin <a href="https://github.com/LiZHongquan2013/Libs_VolleyDiskLruCacheLruCache.git" target="_blank" rel="noopener">https://github.com/LiZHongquan2013/Libs_VolleyDiskLruCacheLruCache.git</a><br>git push origin master </p><blockquote><p>以前收藏的一个有关git相关操作的博客，挺详细<br><a href="http://blog.csdn.net/small_rice_/article/details/45095323" target="_blank" rel="noopener">http://blog.csdn.net/small_rice_/article/details/45095323</a></p></blockquote><h2 id="第一篇博客到这里就结束了，下一篇为三种屏幕适配"><a href="#第一篇博客到这里就结束了，下一篇为三种屏幕适配" class="headerlink" title="第一篇博客到这里就结束了，下一篇为三种屏幕适配"></a>第一篇博客到这里就结束了，下一篇为三种屏幕适配</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;　　想了半天都没想出来写什么作为第一篇博客比较好，突然发现这次项目的版本控制是github，三级缓存和屏幕适配又是一个跑不掉的话题，就以这些话题开始我的博客之旅吧，同时总结一下在AndroidStudio中如何导出jar包。&lt;br&gt;​    &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://yoursite.com/2018/02/11/%E4%B8%89%E7%A7%8D%E5%B1%8F%E5%B9%95%E9%80%82%E9%85%8D%E7%9A%84%E6%96%B9%E5%BC%8F/"/>
    <id>http://yoursite.com/2018/02/11/三种屏幕适配的方式/</id>
    <published>2018-02-11T09:44:45.162Z</published>
    <updated>2018-02-11T09:44:45.162Z</updated>
    
    <content type="html"><![CDATA[<p>​    第一篇博客总结了三级缓存／AndroidStudio打包jar包／上传基本文件到github,　第二篇就接着总结一下三种屏幕适配的方式。<br>​<br>在这里也推荐一下<a href="http://blog.csdn.net/lmj623565791?viewmode=contents" target="_blank" rel="noopener">张鸿洋</a>的博客，关注挺久了，和<a href="http://blog.csdn.net/guolin_blog" target="_blank" rel="noopener">郭霖</a>的都很好。</p><p>第一种方式，dimens中设置不同dp值，来达到适配的目的<br>第二种方式，利用第三方百分比库<br>第三种方式，利用第三方库：AutoLayout </p><h2 id="第一种方式-更改dimens"><a href="#第一种方式-更改dimens" class="headerlink" title="第一种方式  更改dimens"></a>第一种方式  更改dimens</h2><p>　　这种方式也是以前使用的最多的一种方式，通过针对不同的分辨率来设置不同的值，达到不同屏幕适配的目的。但是还是有可能会有一些很奇葩的机型匹配不到，不过只要照顾到90％的手机，匹配基本就算成功了。<br>　　相关用法参考：<a href="http://blog.csdn.net/lmj623565791/article/details/45460089" target="_blank" rel="noopener">http://blog.csdn.net/lmj623565791/article/details/45460089</a></p><h2 id="第二种方式-利用百分比库"><a href="#第二种方式-利用百分比库" class="headerlink" title="第二种方式 利用百分比库"></a>第二种方式 利用百分比库</h2><p>​    这种方式是前段时间出的，挺不错，利用屏幕的百分比来协调布局，达到屏幕适配的目的。这个库虽然不是谷歌官方出的但是已经获得了官方承认<br>​    相关用法参考：github: <a href="https://github.com/hongyangAndroid/android-percent-support-extend" target="_blank" rel="noopener">https://github.com/hongyangAndroid/android-percent-support-extend</a></p><h2 id="第三种方式-AutoLayout"><a href="#第三种方式-AutoLayout" class="headerlink" title="第三种方式 AutoLayout"></a>第三种方式 AutoLayout</h2><p>​    这种方式也是今天才刚看到的，这种方式较之上面两种更好用，可以直接根据设计人员的设计图纸来设置布局，相当不错。<br>​    参考博客：　<a href="http://blog.csdn.net/lmj623565791/article/details/49990941" target="_blank" rel="noopener">http://blog.csdn.net/lmj623565791/article/details/49990941</a><br>​    github地址：<a href="https://github.com/hongyangAndroid/AndroidAutoLayout" target="_blank" rel="noopener">https://github.com/hongyangAndroid/AndroidAutoLayout</a><br>​<br>　个人使用总结：<br> 　1. <code>git clone https://github.com/hongyangAndroid/AndroidAutoLayout.git</code></p><ol><li><code>compile project(&#39;:autolayout&#39;)</code></li><li><code>&lt;meta-data  android:name=&quot;design_width&quot;android:value=&quot;1080&quot;&gt;&lt;/meta-data&gt;   &lt;meta-data  android:name=&quot;design_height&quot;  android:value=&quot;1920&quot;&gt;&lt;/meta-data&gt;</code><br>   4.在Activity的onCreate方法中调用AutoLayout.getInstance().auto(this, true);<br>   5.布局文件中：AutoLinearLayout / AutoRelativeLayout / AutoFrameLayout<br>   6.在之后的布局中，所有的dp改为px就好了，textSize也是一样<br>   7.TextView控件textSize目前存在一点问题，需要比设计人员的图稍微小一点</li></ol><p>​    </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;​    第一篇博客总结了三级缓存／AndroidStudio打包jar包／上传基本文件到github,　第二篇就接着总结一下三种屏幕适配的方式。&lt;br&gt;​&lt;br&gt;在这里也推荐一下&lt;a href=&quot;http://blog.csdn.net/lmj623565791?view
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://yoursite.com/2018/02/11/%E5%85%A8%E5%B1%80%E5%8F%98%E9%87%8F%E7%9A%84%E5%A4%84%E7%90%86/"/>
    <id>http://yoursite.com/2018/02/11/全局变量的处理/</id>
    <published>2018-02-11T09:44:30.769Z</published>
    <updated>2018-02-11T09:44:30.769Z</updated>
    
    <content type="html"><![CDATA[<p>　　很多时候APP会莫名其妙的崩溃，尤其是一些配置很低的收集，重现场景就是在APP切换到后台后，闲置了一段时间后再继续使用时，就会崩溃。<br>　　导致上述崩溃发生的一个可能罪魁祸首就是全局变量，在内存不足的时候，系统会回收一部分闲置的资源，由于APP被切换到了后台，所以之前存放的全局变量很容易被回收，这是再切换到前台继续使用，在使用某个全局变量的时候，就会因为全局变量的值为空而崩溃。<br>　　要解决这个问题，就一定要使用序列化技术。<br>　　<br>　　其实全局变量是不推荐使用的，如果可能的话，尽可能使用intent传递值，这样可以保证不会被回收。即使目标Activity被系统销毁了，Intent上的数据仍然存在，所以Intent是保存数据的一个很好的地方，比本地文件靠谱。但是Intent能传递的数据类型也必须支持序列化，类似于JSONObject等数据类型，就需要进行序列化操作后才可以传递。另外，如果Intent上携带的数据量过大，也会发生崩溃。</p><h2 id="把全局变量序列化到本地"><a href="#把全局变量序列化到本地" class="headerlink" title="把全局变量序列化到本地"></a>把全局变量序列化到本地</h2><p>　　如果一定需要使用全局变量，那么我们在每次修改全局变量的值的时候，都要把值序列化到本地文件中，这样的话，即使内存中的全局变量被回收，本地还保存有最新的值，党我们再次使用时就，就从本地文件中再反序列化到内存中。但长远之计还是要一个模块一个模块地将全局变量转换为Intent上可序列化的实体数据。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;　　很多时候APP会莫名其妙的崩溃，尤其是一些配置很低的收集，重现场景就是在APP切换到后台后，闲置了一段时间后再继续使用时，就会崩溃。&lt;br&gt;　　导致上述崩溃发生的一个可能罪魁祸首就是全局变量，在内存不足的时候，系统会回收一部分闲置的资源，由于APP被切换到了后台，所以之
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://yoursite.com/2018/02/11/Android%E8%87%AA%E5%8A%A8%E5%A1%AB%E5%86%99%E9%AA%8C%E8%AF%81%E7%A0%81/"/>
    <id>http://yoursite.com/2018/02/11/Android自动填写验证码/</id>
    <published>2018-02-11T09:44:17.378Z</published>
    <updated>2018-02-11T09:44:17.378Z</updated>
    
    <content type="html"><![CDATA[<p>　　第四篇博客就来总结下项目中使用到的一个提升用户体验的功能：　Android自动填写验证码<br>　　从字面上来看，很明显的可以看出它的实现流程：监听-&gt;有改变-&gt;获取信息-&gt;改变ui</p><h2 id="观察者模式"><a href="#观察者模式" class="headerlink" title="观察者模式"></a>观察者模式</h2><p>　　观察者模式是软件设计模式中的一种，在此模式中，一个目标物件管理所有相依于它的观察者物件，并且在本身的状态改变时主动发出通知。这通常透过呼叫各观察者所提供的方法来实现。此种模式通常被用来实现事件处理系统<br>　　观察者模式Observer完美的将观察者和被观察的对象分离开，在模块之间划定接线，提高应用程序的可维护性和重用性。同时定义了对象间一种一对多的以来关系，以便一个对象的状态发生变化时，所有依赖于它的对象都得到通知并自动刷新。<br>       观察者：Observer将自己注册到被观察对象中，被观察对象将观察者存放在一个容器里<br>       被观察：当被观察者对象发生了某种变化，从容器中得到所有注册过的观察者，将变化通知观察者<br>       撤销观察：观察者告诉被观察者要撤销观察，被观察者从容器中将观察者去除<br><strong>ContentObserver</strong><br>　　内容观察者，目的是观察捕捉特定uri引起的数据库的变化，继而做一些相应的处理，类似于数据库中的触发器。<br>　　<strong>流程如下：</strong><br>　　１.　创建ContentObserver派生类，重载onChange()方法处理回调。<br>　　２.　利用context.getContentResolover()　获得ContentResolove对象，调用registerContentObserver()方法去注册<br>　　３.　在不需要使用时（例如验证码获取成功后），调用unregisterContentObserver()取消注册</p><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><p>　　在我们创建的SmsObserver类中，必须要实现onChange方法，这是一个检测uri是否变化的方法。<br>　　而验证短信发来的时候，会调用两次，第一次的uri会提示raw，此时只是表示短信到了，还没有写入数据库中。而第二次变化的时候才是我们需要接收与检测的，此时才表示短信已经被写入了数据库中。<br>而对于相关验证码的提取，使用正则表达式的方式，获取连续的4个数字（根据自己的需要）。<br>    　另外，在AndroidManifest文件中添加Read_SMS的权限</p><p>相关代码如下：<br><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.screform.mmd.customview;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.content.Context;</span><br><span class="line"><span class="keyword">import</span> android.database.ContentObserver;</span><br><span class="line"><span class="keyword">import</span> android.database.Cursor;</span><br><span class="line"><span class="keyword">import</span> android.net.Uri;</span><br><span class="line"><span class="keyword">import</span> android.os.Handler;</span><br><span class="line"><span class="keyword">import</span> android.util.Log;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.screform.mmd.aty.Aty_Register;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.regex.Matcher;</span><br><span class="line"><span class="keyword">import</span> java.util.regex.Pattern;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by lizhongquan on 15-11-18.</span></span><br><span class="line"><span class="comment"> * Class to Observer the sms and notify to setText in editText_IdentifyingCode</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SmsObserver</span> <span class="keyword">extends</span> <span class="title">ContentObserver</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Context context;</span><br><span class="line">    <span class="keyword">private</span> Handler <span class="keyword">handler</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Creates a content observer.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> handler The handler to run &#123;<span class="doctag">@link</span> #onChange&#125; on, or null if none.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SmsObserver</span><span class="params">(Context context, Handler <span class="keyword">handler</span>)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(<span class="keyword">handler</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.context = context;</span><br><span class="line">        <span class="keyword">this</span>.<span class="keyword">handler</span> = <span class="keyword">handler</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * code ChangeListener</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> selfChange change or not</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> uri        the uri of event</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">onChange</span><span class="params">(<span class="keyword">boolean</span> selfChange, Uri uri)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onChange(selfChange, uri);</span><br><span class="line"></span><br><span class="line">        Log.d(<span class="string">"info"</span>, <span class="string">"SMS is changed"</span>);</span><br><span class="line">        Log.d(<span class="string">"info"</span>, uri.toString());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// When the sms is coming, it will be change twice.</span></span><br><span class="line">        <span class="comment">// the first time change is not the one we need.</span></span><br><span class="line">        <span class="comment">// The sms is not writed into the database in this time</span></span><br><span class="line">        <span class="keyword">if</span> (uri.toString().equals(<span class="string">"content://sms/raw"</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// handle the second change</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// get the inboxUri</span></span><br><span class="line">        Uri inboxUri = Uri.parse(<span class="string">"content://sms/inbox"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// query the inbox</span></span><br><span class="line">        <span class="comment">// get the sms</span></span><br><span class="line">        Cursor mCursor = context.getContentResolver().query(inboxUri, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="string">"date desc"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> != mCursor) &#123;</span><br><span class="line">            <span class="keyword">if</span> (mCursor.moveToFirst()) &#123;</span><br><span class="line">                String address = mCursor.getString(mCursor.getColumnIndex(<span class="string">"address"</span>));</span><br><span class="line">                String body = mCursor.getString(mCursor.getColumnIndex(<span class="string">"body"</span>));</span><br><span class="line"></span><br><span class="line">                Log.d(<span class="string">"info"</span>, <span class="string">"address is :"</span> + address + <span class="string">", body is "</span> + body);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (address.equals(<span class="string">"106900321100"</span>)) &#123;</span><br><span class="line">                    <span class="comment">// use a regular expression to resolve and get the identifying code</span></span><br><span class="line">                    <span class="comment">// get the four consecutive numbers</span></span><br><span class="line">                    Pattern pattern = Pattern.compile(<span class="string">"(\\d&#123;4&#125;)"</span>);</span><br><span class="line">                    Matcher matcher = pattern.matcher(body);</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">if</span> (matcher.find())&#123;</span><br><span class="line">                        Log.d(<span class="string">"info"</span>, <span class="string">"Identifying code is "</span> + matcher.group(<span class="number">0</span>));</span><br><span class="line">                        <span class="keyword">handler</span>.obtainMessage(Aty_Register.GETSMS, matcher.group(<span class="number">0</span>))</span><br><span class="line">                                .sendToTarget();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// close mCursor</span></span><br><span class="line">        mCursor.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>在Aty_Register.java中：</p><p>initObserver()：<br><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Uri</span> uri = <span class="built_in">Uri</span>.parse(<span class="string">"content://sms"</span>);</span><br><span class="line">smsObserver = <span class="keyword">new</span> SmsObserver(Aty_Register.<span class="keyword">this</span>, handler);</span><br><span class="line">getContentResolver().registerContentObserver(uri, <span class="keyword">true</span>, smsObserver);</span><br></pre></td></tr></table></figure></p><p>onStop()中：　取消注册</p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="function"><span class="keyword">void</span> <span class="title">onStop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onStop();</span><br><span class="line">        getContentResolver().unregisterContentObserver(smsObserver);</span><br><span class="line">        Log.d(<span class="string">"info"</span>, <span class="string">"unregister"</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>handler中：　更新UI</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">case</span> <span class="selector-tag">GETSMS</span>:</span><br><span class="line">      <span class="selector-tag">editText_IdentifyingCode</span><span class="selector-class">.setText</span>(<span class="selector-tag">msg</span><span class="selector-class">.obj</span><span class="selector-class">.toString</span>());</span><br><span class="line">      <span class="selector-tag">break</span>;</span><br></pre></td></tr></table></figure><p>AndroidManifest:</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;uses-permission android:<span class="built_in">name</span>=<span class="string">"android.permission.READ_SMS"</span> /&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;　　第四篇博客就来总结下项目中使用到的一个提升用户体验的功能：　Android自动填写验证码&lt;br&gt;　　从字面上来看，很明显的可以看出它的实现流程：监听-&amp;gt;有改变-&amp;gt;获取信息-&amp;gt;改变ui&lt;/p&gt;
&lt;h2 id=&quot;观察者模式&quot;&gt;&lt;a href=&quot;#观察者模式
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://yoursite.com/2018/02/11/%E6%89%8B%E5%8A%BF/"/>
    <id>http://yoursite.com/2018/02/11/手势/</id>
    <published>2018-02-11T09:43:42.786Z</published>
    <updated>2018-02-11T09:43:42.786Z</updated>
    
    <content type="html"><![CDATA[<p>这里介绍的只是一个简单的DEMO，根据官方的API还可以进行自定义手势的编写，具体的内容就以后遇到了再说，在本项目中也只起一个开后门的验证作用,毕竟一个没有后门的APP不是一个好APP</p><p>画手势图：GestureOverlayView<br>画的时候存在几种状态，可利用GestureDetector中的类进行监听<br>1.onDown : 触碰<br>2.onFling：拖动<br>3.onLongPress：长按<br>4.onScroll：滚动<br>5.onSHowPress：按下，未移动未松动时<br>6.onSingleTagUp：轻击</p><figure class="highlight pony"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取手势编辑视图</span></span><br><span class="line">gestureOverlayView = (<span class="type">GestureOverlayView</span>) findViewById(<span class="type">R</span>.id.gestureOverlayView);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置手势绘图的颜色</span></span><br><span class="line">gestureOverlayView.setGestureColor(<span class="type">Color</span>.<span class="type">RED</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置手势的绘制宽度</span></span><br><span class="line">gestureOverlayView.setGestureStrokeWidth(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 为gesture的手势完成事件绑定事件监听器</span></span><br><span class="line">gestureOverlayView.addOnGesturePerformedListener <span class="function"><span class="keyword">new</span> <span class="title">GestureOverlayView</span>.<span class="title">OnGesturePerformedListener</span>() &#123;</span></span><br><span class="line"><span class="function"> @<span class="title">Override</span></span></span><br><span class="line"><span class="function"> <span class="title">public</span> <span class="title">void</span> <span class="title">onGesturePerformed</span>(<span class="type">GestureOverlayView</span> overlay, final <span class="type">Gesture</span> gesture) &#123;</span></span><br><span class="line"><span class="function"><span class="comment">// 根据Gesture包含的手势创建一个位图</span></span></span><br><span class="line"><span class="function">    <span class="title">Bitmap</span> <span class="title">bitmap</span> = <span class="title">gesture</span>.<span class="title">toBitmap</span>(<span class="number">128</span>, <span class="number">128</span>, <span class="number">10</span>, <span class="number">0xffff0000</span>);</span></span><br><span class="line"><span class="function">    <span class="title">imageView</span>.<span class="title">setImageBitmap</span>(bitmap);</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">// 获取制定文件对应的手势库</span></span></span><br><span class="line"><span class="function">    <span class="title">GestureLibrary</span> <span class="title">guestureLibrary</span> = <span class="title">GestureLibraries</span>.<span class="title">fromFile</span>(<span class="type">Environment</span></span></span><br><span class="line"><span class="function">    .getExternalStorageDirectory().<span class="title">getPath</span>() + "/<span class="title">mygestures</span>");</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">   <span class="comment">// 添加手势                                      </span></span></span><br><span class="line"><span class="function">   <span class="title">guestureLibrary</span>.<span class="title">addGesture</span>(gestureEditText.getText().<span class="title">toString</span>(), <span class="title">gesture</span>);</span></span><br><span class="line"><span class="function">   <span class="title">guestureLibrary</span>.<span class="title">save</span>();</span></span><br><span class="line"><span class="function">&#125;);</span></span><br></pre></td></tr></table></figure><p>读取：<br>读取和写入的时候都会用到一个GestureLibrary手势库，这个库提供了一个方法，gestureLibrariLibrary.recognize(gesture)这个方法可以获得泛型Prediction的结果，Prediction中包含两个属性，一个是手势图的名称，一个是当前你所绘制的手势与目标手势图的相似度，我们可以通过比较它们之间的相似度来实现我们的逻辑运算。<br>同样的，我们也需要为它们定义一个监听器，这个监听器也会在手势完成也就是手指抬起来的时候触发。</p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义手势编辑组件绑定监听器</span></span><br><span class="line">        gestureOverlayView.addOnGesturePerformedListener(<span class="keyword">new</span> GestureOverlayView.OnGesturePerformedListener() &#123;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">onGesturePerformed</span><span class="params">(GestureOverlayView overlay, Gesture gesture)</span> </span>&#123;</span><br><span class="line">                <span class="comment">// 识别用户刚刚所绘制的手势</span></span><br><span class="line">                ArrayList&lt;Prediction&gt; predictions =　gestureLibrariLibrary.recognize(gesture);</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 遍历所有找到的Prediction对象</span></span><br><span class="line">                <span class="keyword">for</span> (Prediction prediction : predictions) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (prediction.name.equals(<span class="string">"test2"</span>))&#123;</span><br><span class="line">                        <span class="comment">// 只有相似度大于6的手势才会被输出</span></span><br><span class="line">                        <span class="keyword">if</span> (prediction.score &gt; <span class="number">6</span>) &#123;</span><br><span class="line">                           </span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;这里介绍的只是一个简单的DEMO，根据官方的API还可以进行自定义手势的编写，具体的内容就以后遇到了再说，在本项目中也只起一个开后门的验证作用,毕竟一个没有后门的APP不是一个好APP&lt;/p&gt;
&lt;p&gt;画手势图：GestureOverlayView&lt;br&gt;画的时候存在几种状态
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://yoursite.com/2018/02/11/Json%E6%95%B0%E6%8D%AE%E7%9A%84%E8%A7%A3%E6%9E%90_Gson/"/>
    <id>http://yoursite.com/2018/02/11/Json数据的解析_Gson/</id>
    <published>2018-02-11T09:43:29.618Z</published>
    <updated>2018-02-11T09:43:29.618Z</updated>
    
    <content type="html"><![CDATA[<p>一些简单的JSON格式解析可以直接使用JSONObject和JSONArray来解析，但是面对比较复杂或者是数据量较大的JSON数据时就需要使用fastJSON和Gson来解析了，这样的效率和效果都更好</p><p>这里介绍本次项目使用到的Gson解析，fastJSON类似，但是由于如果包含了fastJSON,那么在proguard混淆的时候需要在rule中包含以下内容：<br><figure class="highlight haml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-<span class="ruby">keepattributes Signature     /<span class="regexp">/ 避免混淆泛型</span></span></span><br><span class="line"><span class="ruby">-keepattributes *Annotation*　<span class="regexp">//</span>　不混淆注解</span></span><br></pre></td></tr></table></figure></p><p>如果不包含的话，就会出现以下几个问题：<br>１.　加了符号Annotation的实体属性后，一使用就崩溃<br>２.   当有泛型属性时，一使用就崩溃</p><p>接下来就先总结一下Gson的解析</p><h2 id="GSON-简单解析"><a href="#GSON-简单解析" class="headerlink" title="GSON 简单解析"></a>GSON 简单解析</h2><p>先是解析JSONObject<br><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">Gson gson</span> = new Gson();</span><br><span class="line"><span class="attribute">Person person</span> = gson.fromJson(response, Person.class);</span><br></pre></td></tr></table></figure></p><p>再是解析JSONArray<br>需要借助TypeToken将期望解析成的数据类型传入fromJson方法<br><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Gson gson = <span class="keyword">new</span> Gson();</span><br><span class="line"><span class="built_in">List</span>&lt;Person&gt; datas = gson.fromJson(response, <span class="keyword">new</span> TypeToken&lt;<span class="built_in">List</span>&lt;Person&gt;&gt;()&#123;&#125;.getType());</span><br></pre></td></tr></table></figure></p><h2 id="GSON-复杂解析"><a href="#GSON-复杂解析" class="headerlink" title="GSON 复杂解析"></a>GSON 复杂解析</h2><p>JSON返回的数据如下：<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="attr">"code"</span>:<span class="number">0</span>,<span class="attr">"desc"</span>:<span class="string">"Success"</span>,<span class="attr">"content"</span>:&#123;<span class="attr">"grade"</span>:<span class="number">14</span>,<span class="attr">"signin"</span>:<span class="literal">false</span>,<span class="attr">"room"</span>:<span class="string">""</span>,<span class="attr">"docs"</span>:[&#123;<span class="attr">"id"</span>:<span class="number">331</span>,<span class="attr">"docname"</span>:<span class="string">"[SFTM财务系统改善]成本支付-2.xlsxsdfsdfsdfsdfsdfsdfsdfsdfsdfsdfsd.xlsx"</span>,<span class="attr">"pagecnt"</span>:<span class="number">8</span>,<span class="attr">"doctime"</span>:<span class="string">"2015-11-28"</span>&#125;,&#123;<span class="attr">"id"</span>:<span class="number">332</span>,<span class="attr">"docname"</span>:<span class="string">"外勤1.0需求细分列表修改版.docx"</span>,<span class="attr">"pagecnt"</span>:<span class="number">4</span>,<span class="attr">"doctime"</span>:<span class="string">"2015-11-28"</span>&#125;,&#123;<span class="attr">"id"</span>:<span class="number">333</span>,<span class="attr">"docname"</span>:<span class="string">"1.docx"</span>,<span class="attr">"pagecnt"</span>:<span class="number">1</span>,<span class="attr">"doctime"</span>:<span class="string">"2015-11-29"</span>&#125;,&#123;<span class="attr">"id"</span>:<span class="number">334</span>,<span class="attr">"docname"</span>:<span class="string">"要件签字封面（部品单价）.xls"</span>,<span class="attr">"pagecnt"</span>:<span class="number">3</span>,<span class="attr">"doctime"</span>:<span class="string">"2015-11-29"</span>&#125;],<span class="attr">"printer"</span>:[&#123;<span class="attr">"id"</span>:<span class="number">1</span>,<span class="attr">"address"</span>:<span class="string">"5104"</span>&#125;]&#125;&#125;</span><br></pre></td></tr></table></figure></p><p>上面的JSON数据总结一下，也就包含以下几个内容：<br>首先第一层是code, desc,content<br>第二层content中包含以下的内容：grade, signin, room, docs，printer<br>第三层docs中包含以下内容: id, docname, pagecnt, doctime<br>第三层printer中包含以下内容:id, address</p><p>对于这种比较复杂的JSON数据格式的解析，可以分成以下几步来做：</p><ul><li>创建一个实体</li><li>在实体中包含３个属性</li><li>创建一个静态内部类，该类中包含的属性就是content中存在的内容，也就是grade, signin, room, docs，printer。如果content是一个[]，就应该定义为List<doccontent>,如果是{},就定义为DocContent</doccontent></li><li>再在content创建的静态内部类中创建两个静态内部类：Docs和Printer</li></ul><p>总体的效果如下：<br>第一层<br><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> code;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">String</span> desc;</span><br><span class="line"><span class="keyword">private</span> DocContent content;</span><br></pre></td></tr></table></figure></p><p>第二层</p><figure class="highlight zephir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">DocContent</span> </span>&#123;</span><br><span class="line"> <span class="keyword">private</span> <span class="keyword">int</span> grade;</span><br><span class="line">     <span class="keyword">private</span> <span class="keyword">Boolean</span> signin;</span><br><span class="line">     <span class="keyword">private</span> String room;</span><br><span class="line">     <span class="keyword">private</span> <span class="keyword">List</span>&lt;Docs&gt; docs;</span><br><span class="line">     <span class="keyword">private</span> <span class="keyword">List</span>&lt;Printer&gt; printer;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第三层<br><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Docs</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">String</span> docname;</span><br><span class="line">    <span class="keyword">private</span> int pagecnt;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">String</span> doctime;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Printer</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> int id;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">String</span> address;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>当然咯，其中还要包括各种setter和getter方法，只需要注意一点，这里的属性被声明为List是因为这个是一个JSONArray，对于JSONObject只需要直接定义</p><p>完整代码如下：</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">JsonDatas_DocInfo</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getCode</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> code;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCode</span>(<span class="params"><span class="keyword">int</span> code</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.code = code;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getDesc</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> desc;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDesc</span>(<span class="params">String desc</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.desc = desc;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DocContent <span class="title">getContent</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> content;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setContent</span>(<span class="params">DocContent content</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.content = content;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> code;</span><br><span class="line">    <span class="keyword">private</span> String desc;</span><br><span class="line">    <span class="keyword">private</span> DocContent content;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title">DocContent</span> &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getGrade</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> grade;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setGrade</span>(<span class="params"><span class="keyword">int</span> grade</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.grade = grade;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Boolean <span class="title">getSignin</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> signin;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSignin</span>(<span class="params">Boolean signin</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.signin = signin;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">getRoom</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> room;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setRoom</span>(<span class="params">String room</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.room = room;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> List&lt;Docs&gt; <span class="title">getDocs</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> docs;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDocs</span>(<span class="params">List&lt;Docs&gt; docs</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.docs = docs;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> List&lt;Printer&gt; <span class="title">getPrinter</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> printer;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPrinter</span>(<span class="params">List&lt;Printer&gt; printer</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.printer = printer;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">int</span> grade;</span><br><span class="line">        <span class="keyword">private</span> Boolean signin;</span><br><span class="line">        <span class="keyword">private</span> String room;</span><br><span class="line">        <span class="keyword">private</span> List&lt;Docs&gt; docs;</span><br><span class="line">        <span class="keyword">private</span> List&lt;Printer&gt; printer;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title">Docs</span> &#123;</span><br><span class="line">            <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getId</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> id;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span>(<span class="params"><span class="keyword">int</span> id</span>) </span>&#123;</span><br><span class="line">                <span class="keyword">this</span>.id = id;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">public</span> String <span class="title">getDocname</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> docname;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDocname</span>(<span class="params">String docname</span>) </span>&#123;</span><br><span class="line">                <span class="keyword">this</span>.docname = docname;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getPagecnt</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> pagecnt;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPagecnt</span>(<span class="params"><span class="keyword">int</span> pagecnt</span>) </span>&#123;</span><br><span class="line">                <span class="keyword">this</span>.pagecnt = pagecnt;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">public</span> String <span class="title">getDoctime</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> doctime;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDoctime</span>(<span class="params">String doctime</span>) </span>&#123;</span><br><span class="line">                <span class="keyword">this</span>.doctime = doctime;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">private</span> String docname;</span><br><span class="line">            <span class="keyword">private</span> <span class="keyword">int</span> pagecnt;</span><br><span class="line">            <span class="keyword">private</span> String doctime;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title">Printer</span> &#123;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getId</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> id;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span>(<span class="params"><span class="keyword">int</span> id</span>) </span>&#123;</span><br><span class="line">                <span class="keyword">this</span>.id = id;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">public</span> String <span class="title">getAddress</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> address;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAddress</span>(<span class="params">String address</span>) </span>&#123;</span><br><span class="line">                <span class="keyword">this</span>.address = address;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">            <span class="keyword">private</span> String address;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>调用的方法：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">Gson gson = <span class="keyword">new</span> Gson();</span><br><span class="line">JsonDatas_DocInfo jsonDatas_docInfo = gson.fromJson(response, JsonDatas_DocInfo.<span class="keyword">class</span>);</span><br><span class="line"><span class="built_in">List</span>&lt;JsonDatas_DocInfo.DocContent.Docs&gt; docs = jsonDatas_docInfo.getContent().getDocs();</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (docs != <span class="keyword">null</span>) &#123;</span><br><span class="line">    <span class="keyword">for</span> (JsonDatas_DocInfo.DocContent.Docs tempDoc : docs) &#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="built_in">int</span> id = tempDoc.getId();</span><br><span class="line">        <span class="keyword">final</span> <span class="built_in">String</span> docname = tempDoc.getDocname();</span><br><span class="line">        <span class="keyword">final</span> <span class="built_in">int</span> pagecnt = tempDoc.getPagecnt();</span><br><span class="line">        <span class="keyword">final</span> <span class="built_in">String</span> doctime = tempDoc.getDoctime();</span><br><span class="line"></span><br><span class="line">        Log.d(<span class="string">"info"</span>, id + <span class="string">", docname:"</span> + docname + <span class="string">", pagecnt : "</span> +</span><br><span class="line">                pagecnt + <span class="string">", doctime : "</span> + doctime);</span><br><span class="line">        listDocInfo.add(<span class="keyword">new</span> DocInfo(id, docname, pagecnt, doctime));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    handler.sendMessage(msg);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;一些简单的JSON格式解析可以直接使用JSONObject和JSONArray来解析，但是面对比较复杂或者是数据量较大的JSON数据时就需要使用fastJSON和Gson来解析了，这样的效率和效果都更好&lt;/p&gt;
&lt;p&gt;这里介绍本次项目使用到的Gson解析，fastJSON类
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://yoursite.com/2018/02/11/ViewPager%20%E5%8F%96%E6%B6%88%E9%A2%84%E5%8A%A0%E8%BD%BD/"/>
    <id>http://yoursite.com/2018/02/11/ViewPager 取消预加载/</id>
    <published>2018-02-11T09:43:15.607Z</published>
    <updated>2018-02-11T09:43:15.607Z</updated>
    
    <content type="html"><![CDATA[<p>ViewPager在设计的时候有一个预加载的机制，也就是如果你处于当前这个page界面时,会预先加载下一个page。但是有的时候设计到网络请求，就需要取消掉这个预加载。<br>setOffscreenPageLimit()这一个方法是设置预加载的个数，默认为1，但是当你设置为0的时候也会强行将它设置为1。</p><figure class="highlight hsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">public void setOffscreenPageLimit(<span class="keyword">int</span> <span class="keyword">limit</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">limit</span> &lt; DEFAULT_OFFSCREEN_PAGES) &#123;</span><br><span class="line">            Log.w(TAG, <span class="string">"Requested offscreen page limit "</span> + <span class="keyword">limit</span> + <span class="string">" too small; defaulting to "</span> +</span><br><span class="line">                    DEFAULT_OFFSCREEN_PAGES)<span class="comment">;</span></span><br><span class="line">            <span class="keyword">limit</span> = DEFAULT_OFFSCREEN_PAGES<span class="comment">;</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">limit</span> != mOffscreenPageLimit) &#123;</span><br><span class="line">            mOffscreenPageLimit = <span class="keyword">limit</span><span class="comment">;</span></span><br><span class="line">            populate()<span class="comment">;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>所以说，第一种取消预加载的方法就出来了，那就是需要更改这个DEFAULT_OFFSCREEN_PAGES = 0,但是需要更改jar包，特别麻烦，所以接下来就用一下第二种方法</p><p>从官方的API文档来看，Fragment中有一个方法，这个方法是执行在onCreateView()方法之前的，叫做setUserVisibleHint()。用来告诉系统这个UI是否可见。<br><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Set a hint <span class="keyword">to</span> <span class="keyword">the</span> system <span class="keyword">about</span> whether this fragment's UI <span class="keyword">is</span> currently visible <span class="keyword">to</span> <span class="keyword">the</span> user. This hint defaults <span class="keyword">to</span> <span class="literal">true</span> <span class="keyword">and</span> <span class="keyword">is</span> persistent across fragment instance state save <span class="keyword">and</span> restore.</span><br><span class="line">An app may <span class="keyword">set</span> this <span class="keyword">to</span> <span class="literal">false</span> <span class="keyword">to</span> indicate <span class="keyword">that</span> <span class="keyword">the</span> fragment's UI <span class="keyword">is</span> scrolled <span class="keyword">out of</span> visibility <span class="keyword">or</span> <span class="keyword">is</span> otherwise <span class="keyword">not</span> directly visible <span class="keyword">to</span> <span class="keyword">the</span> user. This may be used <span class="keyword">by</span> <span class="keyword">the</span> system <span class="keyword">to</span> prioritize operations such <span class="keyword">as</span> fragment lifecycle updates <span class="keyword">or</span> loader ordering behavior.</span><br><span class="line">Parameters</span><br><span class="line">isVisibleToUser <span class="literal">true</span> <span class="keyword">if</span> this fragment's UI <span class="keyword">is</span> currently visible <span class="keyword">to</span> <span class="keyword">the</span> user (default), <span class="literal">false</span> <span class="keyword">if</span> <span class="keyword">it</span> <span class="keyword">is</span> <span class="keyword">not</span>.</span><br></pre></td></tr></table></figure></p><p>所以第二种方法就是重写这个setUserVisibleHint<br>首先，创建一个父类，以后的Fragment都继承自MyFragment,在其中定义一个抽象方法，在子类中实现延迟加载的逻辑。<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">public <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">MyFragment</span> <span class="keyword">extends</span> <span class="title">Fragment</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> boolean isVisible;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    public void setUserVisibleHint(boolean isVisibleToUser) &#123;</span><br><span class="line">        <span class="keyword">super</span>.setUserVisibleHint(isVisibleToUser);</span><br><span class="line">        <span class="keyword">if</span> (getUserVisibleHint()) &#123;</span><br><span class="line">            isVisible = <span class="literal">true</span>;</span><br><span class="line">            delayLoad();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            isVisible = <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">abstract</span> void delayLoad();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>下面的就是在子类中如何实现延迟加载，同时还引入了布局的复用，因为每次切换都会产生View的重绘，浪费资源<br><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">boolean</span> isReady = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Nullable</span></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> <span class="function">View <span class="title">onCreateView</span><span class="params">(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">if</span> (rootView == <span class="keyword">null</span>) &#123;</span><br><span class="line"></span><br><span class="line">           rootView = inflater.inflate(R.layout.viewpager_printpage, container, <span class="keyword">false</span>);</span><br><span class="line">           isReady = <span class="keyword">true</span>;</span><br><span class="line">           delayLoad();</span><br><span class="line">           Log.d(<span class="string">"info"</span>, <span class="string">"onCreateView"</span>);</span><br><span class="line">       &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">           Log.d(<span class="string">"info"</span>, <span class="string">"rootView != null"</span>);</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="comment">// Cache rootView.</span></span><br><span class="line">       <span class="comment">// remove rootView from its parent</span></span><br><span class="line">       ViewGroup parent = (ViewGroup) rootView.getParent();</span><br><span class="line">       <span class="keyword">if</span> (parent != <span class="keyword">null</span>) &#123;</span><br><span class="line">           parent.removeView(rootView);</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> rootView;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">protected</span> <span class="function"><span class="keyword">void</span> <span class="title">delayLoad</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       <span class="keyword">if</span> (!isReady || !isVisible) &#123;</span><br><span class="line">           <span class="keyword">return</span>;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//　This is a random widget, it will be instantiation in init()</span></span><br><span class="line">       <span class="keyword">if</span> (myViewPager_Printpage == <span class="keyword">null</span>) &#123;</span><br><span class="line">           init();</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;ViewPager在设计的时候有一个预加载的机制，也就是如果你处于当前这个page界面时,会预先加载下一个page。但是有的时候设计到网络请求，就需要取消掉这个预加载。&lt;br&gt;setOffscreenPageLimit()这一个方法是设置预加载的个数，默认为1，但是当你设置
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://yoursite.com/2018/02/11/%E4%BD%BF%E7%94%A8Gradle%E5%8F%91%E5%B8%83%E9%A1%B9%E7%9B%AE%E5%88%B0JCenter%E4%BB%93%E5%BA%93/"/>
    <id>http://yoursite.com/2018/02/11/使用Gradle发布项目到JCenter仓库/</id>
    <published>2018-02-11T09:42:33.183Z</published>
    <updated>2018-02-11T09:42:33.183Z</updated>
    
    <content type="html"><![CDATA[<p>如果想在AndroidStudio中直接使用别人的项目或者是库，一般的做法是在dependencies中进行compile，而compile的东西就是存放在JCenter或者Maven仓库中的。</p><p>在这里我上传到JCenter，因为现在默认是支持JCenter，同时JCenter也兼容Maven</p><h2 id="注册Bintray账号"><a href="#注册Bintray账号" class="headerlink" title="注册Bintray账号"></a>注册Bintray账号</h2><p>简单注册就好，<a href="https://bintray.com/" target="_blank" rel="noopener">Bintray传送门</a>， 也可以选择github或者其他方式登陆</p><h2 id="生成项目的JavaDoc和source-JARs并上传"><a href="#生成项目的JavaDoc和source-JARs并上传" class="headerlink" title="生成项目的JavaDoc和source JARs并上传"></a>生成项目的JavaDoc和source JARs并上传</h2><p>存放在JCenter仓库中的东西就是JavaDoc和sourceJARs.</p><p><strong>1. 在根build.gradle中:</strong><br>添加后两行classpath就可以了，第一行不用变<br><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">buildscript</span> &#123;</span><br><span class="line">    <span class="keyword">repositories</span> &#123;</span><br><span class="line">        jcenter()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">dependencies</span> &#123;</span><br><span class="line">        <span class="keyword">classpath</span> <span class="string">'com.android.tools.build:gradle:2.0.0-alpha3'</span></span><br><span class="line">        <span class="keyword">classpath</span> <span class="string">'com.github.dcendents:android-maven-gradle-plugin:1.3'</span></span><br><span class="line">        <span class="keyword">classpath</span> <span class="string">'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.0'</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// <span class="doctag">NOTE:</span> Do not place your application dependencies here; they belong</span></span><br><span class="line">        <span class="comment">// in the individual module build.gradle files</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>2. 在需要上传的Module下的build.gradle中：</strong><br>    第一行，如果是library就改为com.android.library。<br>    后面两行必须的。<br><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line">apply plugin: <span class="string">'com.android.application'</span></span><br><span class="line">apply plugin: <span class="string">'com.github.dcendents.android-maven'</span></span><br><span class="line">apply plugin: <span class="string">'com.jfrog.bintray'</span></span><br><span class="line"></span><br><span class="line">version = <span class="string">"1.0.0"</span></span><br><span class="line"></span><br><span class="line">android &#123;</span><br><span class="line">    compileSdkVersion <span class="number">23</span></span><br><span class="line">    buildToolsVersion <span class="string">"23.0.2"</span></span><br><span class="line">    resourcePrefix <span class="string">""</span> <span class="comment">//随便填</span></span><br><span class="line"></span><br><span class="line">    defaultConfig &#123;</span><br><span class="line">        applicationId <span class="string">"com.customwidget.lzqwidget"</span></span><br><span class="line">        minSdkVersion <span class="number">14</span></span><br><span class="line">        targetSdkVersion <span class="number">23</span></span><br><span class="line">        versionCode <span class="number">1</span></span><br><span class="line">        versionName <span class="string">"1.0"</span></span><br><span class="line">    &#125;</span><br><span class="line">    buildTypes &#123;</span><br><span class="line">        release &#123;</span><br><span class="line">            minifyEnabled <span class="keyword">false</span></span><br><span class="line">            proguardFiles getDefaultProguardFile(<span class="string">'proguard-android.txt'</span>), <span class="string">'proguard-rules.pro'</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">dependencies</span> &#123;</span><br><span class="line">    <span class="keyword">compile</span> <span class="keyword">fileTree</span>(dir: <span class="string">'libs'</span>, <span class="keyword">include</span>: [<span class="string">'*.jar'</span>])</span><br><span class="line">    testCompile <span class="string">'junit:junit:4.12'</span></span><br><span class="line">    <span class="keyword">compile</span> <span class="string">'com.android.support:appcompat-v7:23.1.1'</span></span><br><span class="line">    <span class="keyword">compile</span> <span class="string">'com.android.support:design:23.1.1'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 下面的可以全部复制，然后更改为自己的就好了</span></span><br><span class="line"><span class="keyword">def</span> siteUrl = <span class="string">'https://github.com/LiZHongquan2013/CustomWidget'</span> <span class="comment">// 项目主页</span></span><br><span class="line"><span class="keyword">def</span> gitUrl = <span class="string">'https://github.com/LiZHongquan2013/CustomWidget.git'</span> <span class="comment">// 项目git的clone地址</span></span><br><span class="line"><span class="keyword">group</span> = <span class="string">"com.customwidget.lzqwidget"</span> <span class="comment">// Maven Group ID for the artifact 一般为包名</span></span><br><span class="line">install &#123;</span><br><span class="line">    <span class="keyword">repositories</span>.mavenInstaller &#123;</span><br><span class="line">        <span class="comment">// This generates POM.xml with proper parameters</span></span><br><span class="line">        pom &#123;</span><br><span class="line">            <span class="keyword">project</span> &#123;</span><br><span class="line">                packaging <span class="string">'aar'</span></span><br><span class="line">                <span class="comment">// Add your description here</span></span><br><span class="line">                name <span class="string">'Android CustomWidget'</span> <span class="comment">//项目描述</span></span><br><span class="line">                url siteUrl</span><br><span class="line">                <span class="comment">// Set your license， 不用修改</span></span><br><span class="line">                licenses &#123;</span><br><span class="line">                    license &#123;</span><br><span class="line">                        name <span class="string">'The Apache Software License, Version 2.0'</span></span><br><span class="line">                        url <span class="string">'http://www.apache.org/licenses/LICENSE-2.0.txt'</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                developers &#123;</span><br><span class="line">                    developer &#123;</span><br><span class="line">                        id <span class="string">'LiZHongquan2013'</span></span><br><span class="line">                        name <span class="string">'LiZHongquan2013'</span></span><br><span class="line">                        email <span class="string">'JonsTank2013@gmail.com'</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                scm &#123;</span><br><span class="line">                    connection gitUrl</span><br><span class="line">                    developerConnection gitUrl</span><br><span class="line">                    url siteUrl</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">task</span> sourcesJar(type: Jar) &#123;</span><br><span class="line">    <span class="keyword">from</span> android.<span class="keyword">sourceSets</span>.main.java.srcDirs</span><br><span class="line">    classifier = <span class="string">'sources'</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">task</span> javadoc(type: Javadoc) &#123;</span><br><span class="line">    <span class="keyword">source</span> = android.<span class="keyword">sourceSets</span>.main.java.srcDirs</span><br><span class="line">    <span class="keyword">classpath</span> += <span class="keyword">project</span>.files(android.getBootClasspath().<span class="keyword">join</span>(<span class="keyword">File</span>.pathSeparator))</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">task</span> javadocJar(type: Jar, dependsOn: javadoc) &#123;</span><br><span class="line">    classifier = <span class="string">'javadoc'</span></span><br><span class="line">    <span class="keyword">from</span> javadoc.<span class="keyword">destinationDir</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">artifacts</span> &#123;</span><br><span class="line">    archives javadocJar</span><br><span class="line">    archives sourcesJar</span><br><span class="line">&#125;</span><br><span class="line">Properties properties = <span class="keyword">new</span> Properties()</span><br><span class="line">properties.load(<span class="keyword">project</span>.rootProject.<span class="keyword">file</span>(<span class="string">'local.properties'</span>).newDataInputStream())</span><br><span class="line">bintray &#123;</span><br><span class="line">    user = properties.getProperty(<span class="string">"bintray.user"</span>)</span><br><span class="line">    key = properties.getProperty(<span class="string">"bintray.apikey"</span>)</span><br><span class="line">    <span class="keyword">configurations</span> = [<span class="string">'archives'</span>]</span><br><span class="line">    pkg &#123;</span><br><span class="line">        repo = <span class="string">"maven"</span></span><br><span class="line">        name = <span class="string">"CustomWidget"</span></span><br><span class="line">        websiteUrl = siteUrl</span><br><span class="line">        vcsUrl = gitUrl</span><br><span class="line">        licenses = [<span class="string">"Apache-2.0"</span>]</span><br><span class="line">        publish = <span class="keyword">true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>3. 在local.properties中：</strong></p><p>API Key可以点击自己的头像，选择your profile-&gt;点击edit选项-&gt;选择API Key<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">bintray.<span class="attribute">user</span>=填写你的Bintray用户名</span><br><span class="line">bintray.<span class="attribute">apikey</span>=填写你的Bintray API Key</span><br></pre></td></tr></table></figure></p><p>这个文件一般是需要是.gitignore中写入的，避免信息泄露<br>默认.gitignore中是包含了它，如果没有，就需要手动加入</p><p><strong>4. 生成</strong><br>Rebuild一下，然后 ./gradlew install</p><p><strong>5. 上传到Bintray</strong><br>./gradlew bintrayUpload</p><blockquote><p>上传完成即可在Bintray网站上找到你的Repo，我们需要完成最后一步工作，申请你的Repo添加到JCenter。可以进入<a href="https://bintray.com/bintray/jcenter" target="_blank" rel="noopener">这个页面</a>,点击include my package， 输入你的项目名字点击匹配到的项目，然后写一写Comments再send即可，然后就等管理员批准了，我是大概等了40分钟，然后网站上会给你一条通过信息，然后就OK了，大功告成。</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;如果想在AndroidStudio中直接使用别人的项目或者是库，一般的做法是在dependencies中进行compile，而compile的东西就是存放在JCenter或者Maven仓库中的。&lt;/p&gt;
&lt;p&gt;在这里我上传到JCenter，因为现在默认是支持JCenter，
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://yoursite.com/2018/02/11/%E5%8F%91%E5%B8%83%E8%87%AA%E5%B7%B1%E9%A1%B9%E7%9B%AE%E8%AE%A9%E5%88%AB%E4%BA%BA%E5%8F%AF%E4%BB%A5%E5%9C%A8dependencies%E4%B8%ADcompile%E7%9A%84%E6%9B%B4%E7%AE%80%E5%8D%95%E6%96%B9%E6%B3%95/"/>
    <id>http://yoursite.com/2018/02/11/发布自己项目让别人可以在dependencies中compile的更简单方法/</id>
    <published>2018-02-11T09:42:17.077Z</published>
    <updated>2018-02-11T09:42:17.077Z</updated>
    
    <content type="html"><![CDATA[<p>昨天写了一篇文章<a href="http://blog.csdn.net/jonstank2013/article/details/50512487" target="_blank" rel="noopener">《 使用Gradle发布项目到JCenter仓库》</a><br>方法较为繁琐，同时也需要等待审核才能发布。<br>今天查找到了一个更简单的方法，利用JitPack，可以两步完成。</p><h2 id="发布"><a href="#发布" class="headerlink" title="发布"></a>发布</h2><ol><li>登陆 <a href="https://jitpack.io/" target="_blank" rel="noopener">jitpack</a></li><li>在编辑框中输入github的网址，完成后点击LookUp<br><img src="http://img.blog.csdn.net/20160114182954031" alt=""></li></ol><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>点击 Get it.</p><p>之后网页就会自动导航到下面那一栏，按照里面的两个顺序依次填写就可以完成。是不是很简单？<br><img src="http://img.blog.csdn.net/20160114183439846" alt=""></p><p>注意：</p><pre><code>1. 上传到github的版本需要有一个Release，设置Tag2.  如果出现&quot;Dependency ..... on project app resolves to an APK archive .....................&quot;的错误，只需要把库的buid.gradle中apply plugin: &apos;com.android.application&apos;改为&apos;com.android.library&apos;。因为APP里面只允许存在一个</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;昨天写了一篇文章&lt;a href=&quot;http://blog.csdn.net/jonstank2013/article/details/50512487&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;《 使用Gradle发布项目到JCenter仓库》&lt;/a&gt;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://yoursite.com/2018/02/11/Go%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89%EF%BC%9ALinux%E4%B8%8B%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE/"/>
    <id>http://yoursite.com/2018/02/11/Go语言学习笔记（一）：Linux下的安装与配置/</id>
    <published>2018-02-11T09:41:34.500Z</published>
    <updated>2018-02-11T09:41:34.500Z</updated>
    
    <content type="html"><![CDATA[<h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><p><a href="https://golang.org/dl/" target="_blank" rel="noopener">https://golang.org/dl/</a> 进入这个网址，选择对应的版本进行下载，需要翻墙。</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>默认是建议安装到/usr/local<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo tar -C /usr/local -xzf go1.<span class="number">6</span><span class="selector-class">.linux-amd64</span><span class="selector-class">.tar</span><span class="selector-class">.gz</span></span><br></pre></td></tr></table></figure></p><h2 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h2><p>进入/usr/local/go<br><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bin/<span class="keyword">go</span> <span class="keyword">version</span> 查看版本号是否对应</span><br></pre></td></tr></table></figure></p><h2 id="设置环境变量"><a href="#设置环境变量" class="headerlink" title="设置环境变量"></a>设置环境变量</h2><p>需要设置4个环境变量: GOROOT, GOPATH, GOBIN, PATH<br>设置到profile文件中(~/.bash_profile或者 /etc/profile)<br>我这里选择的是/etc/profile<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#Go environment</span></span><br><span class="line"><span class="builtin-name">export</span> <span class="attribute">GOROOT</span>=/usr/local/go</span><br><span class="line"><span class="builtin-name">export</span> <span class="attribute">GOPATH</span>=~/golib:~/goproject</span><br><span class="line"><span class="builtin-name">export</span> <span class="attribute">GOBIN</span>=~/gobin</span><br><span class="line"><span class="builtin-name">export</span> <span class="attribute">PATH</span>=<span class="variable">$PATH</span>:$GOROOT/bin:$GOBIN</span><br></pre></td></tr></table></figure></p><p>添加完成之后，使用 source ./profile 让信息立刻生效</p><h2 id="验证-1"><a href="#验证-1" class="headerlink" title="验证"></a>验证</h2><p>在任意目录下输入 go version查看版本号</p><h2 id="下载beego"><a href="#下载beego" class="headerlink" title="下载beego"></a>下载beego</h2><p>go get github.com/astaxie/beego</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;下载&quot;&gt;&lt;a href=&quot;#下载&quot; class=&quot;headerlink&quot; title=&quot;下载&quot;&gt;&lt;/a&gt;下载&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://golang.org/dl/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https:
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://yoursite.com/2018/02/11/Python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0(%E4%B8%80)%E3%80%80%E9%AB%98%E9%98%B6%E5%87%BD%E6%95%B0%EF%BC%8C%E5%81%8F%E5%87%BD%E6%95%B0%EF%BC%8C%E9%97%AD%E5%8C%85/"/>
    <id>http://yoursite.com/2018/02/11/Python学习笔记(一)　高阶函数，偏函数，闭包/</id>
    <published>2018-02-11T09:41:20.796Z</published>
    <updated>2018-02-11T09:41:20.796Z</updated>
    
    <content type="html"><![CDATA[<p>Python中高阶函数可接受其他的函数作为参数。</p><h2 id="常用高阶函数"><a href="#常用高阶函数" class="headerlink" title="常用高阶函数"></a>常用高阶函数</h2><h2 id="map-function-list"><a href="#map-function-list" class="headerlink" title="map(function, list) "></a>map(function, list) </h2><p>让list的每一个元素依次调用function函数，并获取返回值存入一个新的list中。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">format_name</span><span class="params">(s)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> s.capitalize() <span class="comment">#将首字母大写，其余小写</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> map(format_name, [<span class="string">'adam'</span>, <span class="string">'LISA'</span>, <span class="string">'barT'</span>])</span><br></pre></td></tr></table></figure></p><p>结果为: [‘Adam’, ‘Lisa’, ‘Bart’]</p><h2 id="reduce-f-list-optional"><a href="#reduce-f-list-optional" class="headerlink" title="reduce(f, list, optional)"></a>reduce(f, list, optional)</h2><p>函数f必须包含两个参数，optional可选，如果存在则表示初值为optional<br>reduce()对list的每个元素反复调用函数f，并返回最终结果值。</p><figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">def f(x, y):</span><br><span class="line">    <span class="keyword">return</span> x + y</span><br><span class="line"></span><br><span class="line">reduce(f, [<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>])</span><br><span class="line"></span><br><span class="line"><span class="meta">#先计算头两个元素：f(1, 3)，结果为4；</span></span><br><span class="line"><span class="meta">#再把结果和第3个元素计算：f(4, 5)，结果为9；</span></span><br><span class="line"><span class="meta">#再把结果和第4个元素计算：f(9, 7)，结果为16；</span></span><br><span class="line"><span class="meta">#再把结果和第5个元素计算：f(16, 9)，结果为25；</span></span><br><span class="line"><span class="meta">#由于没有更多的元素了，计算结束，返回结果25。</span></span><br></pre></td></tr></table></figure><h2 id="filter-f-list"><a href="#filter-f-list" class="headerlink" title="filter(f, list)"></a>filter(f, list)</h2><p>函数 f 的作用是对每个元素进行判断，返回 True或 False，filter()根据判断结果自动过滤掉不符合条件的元素，返回由符合条件元素组成的新list。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">is_odd</span><span class="params">(x)</span></span><span class="symbol">:</span></span><br><span class="line">    <span class="keyword">return</span> x % <span class="number">2</span> == <span class="number">1</span></span><br><span class="line"></span><br><span class="line">filter(is_odd, [<span class="number">1</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">9</span>, <span class="number">12</span>, <span class="number">17</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment">#结果　[1, 7, 9, 17]</span></span><br></pre></td></tr></table></figure><h2 id="自定义排序函数-sorted-list-optional"><a href="#自定义排序函数-sorted-list-optional" class="headerlink" title="自定义排序函数 sorted(list, optional)"></a>自定义排序函数 sorted(list, optional)</h2><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sorted([<span class="number">36</span>, <span class="number">5</span>, <span class="number">12</span>, <span class="number">9</span>, <span class="number">21</span>])</span><br><span class="line"></span><br><span class="line"># [<span class="number">5</span>, <span class="number">9</span>, <span class="number">12</span>, <span class="number">21</span>, <span class="number">36</span>]</span><br></pre></td></tr></table></figure><p>sorted()也是一个高阶函数，它可以接收一个比较函数来实现自定义排序，比较函数的定义是，传入两个待比较的元素 x, y，如果 x 应该排在 y 的前面，返回 -1，如果 x 应该排在 y 的后面，返回 1。如果 x 和 y 相等，返回 0。</p><p>如果我们要实现倒序排序，只需要编写一个reversed_cmp函数：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">reversed_cmp</span><span class="params">(x, y)</span></span><span class="symbol">:</span></span><br><span class="line">    <span class="keyword">if</span> x &gt; <span class="symbol">y:</span></span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> x &lt; <span class="symbol">y:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line">sorted([<span class="number">36</span>, <span class="number">5</span>, <span class="number">12</span>, <span class="number">9</span>, <span class="number">21</span>], reversed_cmp)</span><br><span class="line"></span><br><span class="line"><span class="comment">#[36, 21, 12, 9, 5]</span></span><br></pre></td></tr></table></figure><p>sorted()也可以对字符串进行排序，字符串默认按照ASCII大小来比较：</p><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sorted([<span class="string">'bob'</span>, <span class="string">'about'</span>, <span class="string">'Zoo'</span>, <span class="string">'Credit'</span>])</span><br><span class="line"># [<span class="string">'Credit'</span>, <span class="string">'Zoo'</span>, <span class="string">'about'</span>, <span class="string">'bob'</span>]</span><br></pre></td></tr></table></figure><p>对字符串排序时，有时候忽略大小写排序更符合习惯。<br>请利用sorted()高阶函数，实现忽略大小写排序的算法。<br><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">def cmp_ignore_case(s1, s2):</span><br><span class="line">    s1 = s1.lower()</span><br><span class="line">    s2 = s2.lower()</span><br><span class="line">    <span class="keyword">if</span> s1 &gt; s2:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> s1 &lt; s2:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line">print sorted([<span class="string">'bob'</span>, <span class="string">'about'</span>, <span class="string">'Zoo'</span>, <span class="string">'Credit'</span>], cmp_ignore_case) </span><br><span class="line"></span><br><span class="line"># [<span class="string">'about'</span>, <span class="string">'bob'</span>, <span class="string">'Credit'</span>, <span class="string">'Zoo'</span>]</span><br></pre></td></tr></table></figure></p><h2 id="返回函数"><a href="#返回函数" class="headerlink" title="返回函数"></a>返回函数</h2><p>请编写一个函数calc_prod(lst)，它接收一个list，返回一个函数，返回函数可以计算参数的乘积。<br>内部编写的函数可使用外部的函数变量<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">calc_prod</span><span class="params">(lst)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">response</span><span class="params">()</span>:</span></span><br><span class="line">        sum = <span class="number">1</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> lst:</span><br><span class="line">            sum *= i</span><br><span class="line">        <span class="keyword">return</span> sum</span><br><span class="line">    <span class="keyword">return</span> response</span><br><span class="line"></span><br><span class="line">f = calc_prod([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>])</span><br><span class="line"><span class="keyword">print</span> f()</span><br></pre></td></tr></table></figure></p><p>print f()打印的是函数运行的结果，也就是返回值。<br>print f打印的是函数在内存空间中的地址</p><h2 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h2><p>在函数内部定义的函数和外部定义的函数是一样的，只是他们无法被外部访问。<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">calc_sum</span><span class="params">(lst)</span></span><span class="symbol">:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">lazy_sum</span><span class="params">()</span></span><span class="symbol">:</span></span><br><span class="line">        <span class="keyword">return</span> sum(lst)</span><br><span class="line">    <span class="keyword">return</span> lazy_sum</span><br></pre></td></tr></table></figure></p><p>这种内层函数引用了外层函数的变量（参数也算变量），然后返回内层函数的情况，称为闭包（Closure）。<br>闭包的特点是返回的函数还引用了外层函数的局部变量，所以，要正确使用闭包，就要确保引用的局部变量在函数返回后不能变。返回函数不要引用任何循环变量，或者后续会发生变化的变量。</p><h2 id="匿名函数：关键字-lambda"><a href="#匿名函数：关键字-lambda" class="headerlink" title="匿名函数：关键字 lambda"></a>匿名函数：关键字 lambda</h2><p>高阶函数可以接收函数做参数，有时候我们不需要显式地定义函数，直接传入匿名函数更方便。</p><p>关键字lambda 表示匿名函数，冒号前面的 x 表示函数参数。</p><p>匿名函数有个限制，就是只能有一个表达式，不写return，返回值就是该表达式的结果。<br><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">map(lambda <span class="keyword">x</span>: <span class="keyword">x</span> * <span class="keyword">x</span>, [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>])</span><br><span class="line"># [<span class="number">1</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">16</span>, <span class="number">25</span>, <span class="number">36</span>, <span class="number">49</span>, <span class="number">64</span>, <span class="number">81</span>]</span><br><span class="line"># 匿名函数 lambda <span class="keyword">x</span>: <span class="keyword">x</span> * <span class="keyword">x</span> 实际上就是：</span><br><span class="line">def f(<span class="keyword">x</span>):</span><br><span class="line">    return <span class="keyword">x</span> * <span class="keyword">x</span></span><br></pre></td></tr></table></figure></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#利用匿名函数简化以下代码：</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">is_not_empty</span><span class="params">(s)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> s <span class="keyword">and</span> len(s.strip()) &gt; <span class="number">0</span></span><br><span class="line">filter(is_not_empty, </span><br><span class="line">[<span class="string">'test'</span>, <span class="keyword">None</span>, <span class="string">''</span>, <span class="string">'str'</span>, <span class="string">'  '</span>, <span class="string">'END'</span>])</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> filter(</span><br><span class="line">    <span class="keyword">lambda</span> s: s <span class="keyword">and</span> len(s.strip())&gt;<span class="number">0</span>,</span><br><span class="line">    [<span class="string">'test'</span>, <span class="keyword">None</span>, <span class="string">''</span>, <span class="string">'str'</span>, <span class="string">'  '</span>, <span class="string">'END'</span>])</span><br></pre></td></tr></table></figure><h2 id="偏函数"><a href="#偏函数" class="headerlink" title="偏函数"></a>偏函数</h2><p>当一个函数有很多参数时，调用者就需要提供多个参数。如果减少参数个数，就可以简化调用者的负担。</p><p>例如，int(str, option)函数可以把字符串转换为整数，第二个参数option可选，如果设置了的话就可以设置函数按多少进制转换，默认的函数是十进制转换。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;</span>&gt; int(<span class="string">'12345'</span>)</span><br><span class="line"><span class="number">12345</span></span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; int(<span class="string">'12345'</span>, base=<span class="number">8</span>)</span><br><span class="line"><span class="number">5349</span></span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; int(<span class="string">'12345'</span>, <span class="number">16</span>)</span><br><span class="line"><span class="number">74565</span></span><br></pre></td></tr></table></figure><p>假设要转换大量的二进制字符串，每次都传入int(x, base=2)非常麻烦，于是可以定义一个int2()的函数，默认把base=2传进去。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">int2</span><span class="params">(x, base=<span class="number">2</span>)</span></span><span class="symbol">:</span></span><br><span class="line">    <span class="keyword">return</span> int(x, base)</span><br></pre></td></tr></table></figure><p>而从python来说，提供了一种定义好的方法，帮助我们创建一个偏函数的，不需要我们自己定义一个新函数，可以直接使用下面的代码创建一个新的函数：</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">import functools</span><br><span class="line">int2 = functools.<span class="keyword">partial</span>(<span class="keyword">int</span>, <span class="keyword">base</span>=<span class="number">2</span>)</span><br></pre></td></tr></table></figure><p>在sorted这个高阶函数中传入自定义排序函数可以实现忽略大小写排序。可用functools.partial把这个复杂调用变成一个简单的函数：<br><figure class="highlight ceylon"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> functools</span><br><span class="line"></span><br><span class="line">sorted<span class="number">_</span>ignore<span class="number">_</span><span class="keyword">case</span> = functools.partial(sorted, </span><br><span class="line">cmp=lambda s<span class="number">1</span>, s<span class="number">2</span>: cmp(s<span class="number">1</span>.upper(), s<span class="number">2</span>.upper()))</span><br><span class="line"></span><br><span class="line">print sorted<span class="number">_</span>ignore<span class="number">_</span><span class="keyword">case</span>([<span class="string">'bob'</span>, <span class="string">'about'</span>, <span class="string">'Zoo'</span>, <span class="string">'Credit'</span>])</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Python中高阶函数可接受其他的函数作为参数。&lt;/p&gt;
&lt;h2 id=&quot;常用高阶函数&quot;&gt;&lt;a href=&quot;#常用高阶函数&quot; class=&quot;headerlink&quot; title=&quot;常用高阶函数&quot;&gt;&lt;/a&gt;常用高阶函数&lt;/h2&gt;&lt;h2 id=&quot;map-function-list
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://yoursite.com/2018/02/11/Python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0(%E4%BA%8C)%20%20%E8%A3%85%E9%A5%B0%E5%99%A8decorator/"/>
    <id>http://yoursite.com/2018/02/11/Python学习笔记(二)  装饰器decorator/</id>
    <published>2018-02-11T09:41:05.547Z</published>
    <updated>2018-02-11T09:41:05.548Z</updated>
    
    <content type="html"><![CDATA[<h2 id="装饰器decorator"><a href="#装饰器decorator" class="headerlink" title="装饰器decorator"></a>装饰器decorator</h2><p>decorator 本质上就是一个高阶函数，它接收一个函数作为参数，然后，返回一个新函数。例如，现在存在一个函数A(),但是里面没有Log，没有打印出相关的信息，现在我又想添加一个Log方法，就可以使用装饰器了，这样的话就不用直接修改源代码。只需要只用@标识符</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">performance</span><span class="params">(f)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">fn</span><span class="params">(*args, **kw)</span>:</span>　</span><br><span class="line">    <span class="comment"># *args和**kw可以保证任意参数个数的函数都可以被装饰</span></span><br><span class="line">    <span class="comment"># 如果只有一个参数，被装饰的函数有２个参数就会报错</span></span><br><span class="line">        <span class="keyword">print</span> <span class="string">'call factorial() in'</span></span><br><span class="line">        <span class="keyword">return</span> f(*args, **kw)</span><br><span class="line">    <span class="keyword">return</span> fn</span><br><span class="line"></span><br><span class="line"><span class="comment">#　通过添加　@ + 函数名来表示装饰器    </span></span><br><span class="line"><span class="meta">@performance</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">factorial</span><span class="params">(n)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> reduce(<span class="keyword">lambda</span> x,y: x*y, range(<span class="number">1</span>, n+<span class="number">1</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> factorial(<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># call factorial() in</span></span><br><span class="line"><span class="comment"># 3628800</span></span><br></pre></td></tr></table></figure><h2 id="编写带参数decorator-log-‘DEBUG’"><a href="#编写带参数decorator-log-‘DEBUG’" class="headerlink" title="编写带参数decorator : @log(‘DEBUG’)"></a>编写带参数decorator : @log(‘DEBUG’)</h2><p>不带参的装饰器需要２层解析，第一层也就是最外面的一层用于接受函数，第二层用于创建一个新函数，并将结果返回。<br>而带参的装饰器需要３层解析，第一层用于获取参数，第二层用于接受函数，第三层用于创建一个新函数，并将结果返回。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> functools</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">log</span><span class="params">(options)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">printlog</span><span class="params">(f)</span>:</span></span><br><span class="line"><span class="meta">    @functools.wraps(f) </span></span><br><span class="line">    <span class="comment">#functools用于复制原函数的一些必要属性到新函数上，下一节具体讲解</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">wrap</span><span class="params">(*args, **kw)</span>:</span></span><br><span class="line">            <span class="keyword">if</span> options == <span class="string">'DEBUG'</span>:</span><br><span class="line">                <span class="keyword">print</span> <span class="string">'This is DEBUG'</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">print</span> <span class="string">'This is OTHERS'</span></span><br><span class="line">            <span class="keyword">return</span> f(*args, **kw)</span><br><span class="line">        <span class="keyword">return</span> wrap</span><br><span class="line">    <span class="keyword">return</span> printlog</span><br><span class="line"></span><br><span class="line"><span class="meta">@log('DEBUG')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">factorial</span><span class="params">(n)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">'Number is '</span>, n</span><br><span class="line"></span><br><span class="line"><span class="meta">@log('RELEASE')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">factorial2</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">print</span> <span class="string">''</span></span><br><span class="line"><span class="keyword">print</span> factorial2()</span><br><span class="line"><span class="keyword">print</span> factorial(<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># This is OTHERS</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># None</span></span><br><span class="line"><span class="comment"># This is DEBUG</span></span><br><span class="line"><span class="comment"># ('Number is ', 10)</span></span><br></pre></td></tr></table></figure><h2 id="完善装饰器-functools"><a href="#完善装饰器-functools" class="headerlink" title="完善装饰器 functools"></a>完善装饰器 functools</h2><p>产生了一个新的装饰器之后，所在函数的一些基本属性例如name和doc会被新函数的属性name和doc取代。这肯定不是我们需要的，因为有的时候有的东西是基于函数名或者函数的一些其他属性来绑定的。<br>所以在创建新函数的时候就需要将原函数的一些基本属性复制到新函数中。<br>Python自带一个复制的库-&gt; functools</p><p>首先引用包 import functools<br>然后在第二层解析与第三层解析中间添加-&gt; @functools.wraps(f)<br>如果是无参的装饰器就在第一层和第二层解析中间添加</p><p>通俗一点：就是在获取了function参数之后添加该方法</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;装饰器decorator&quot;&gt;&lt;a href=&quot;#装饰器decorator&quot; class=&quot;headerlink&quot; title=&quot;装饰器decorator&quot;&gt;&lt;/a&gt;装饰器decorator&lt;/h2&gt;&lt;p&gt;decorator 本质上就是一个高阶函数，它接收一个函数作
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://yoursite.com/2018/02/11/Python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%89%EF%BC%89/"/>
    <id>http://yoursite.com/2018/02/11/Python学习笔记（三）/</id>
    <published>2018-02-11T09:40:47.850Z</published>
    <updated>2018-02-11T09:40:47.851Z</updated>
    
    <content type="html"><![CDATA[<h2 id="安装第三方模块"><a href="#安装第三方模块" class="headerlink" title="安装第三方模块"></a>安装第三方模块</h2><p>python 2.7.9版本内置pip，官方推荐。在命令行中使用</p><ul><li>pip install xxx.py　安装第三方模块</li><li>命令行输入python，进入python的命令行模式</li><li>import xxx</li></ul><h2 id="使用future"><a href="#使用future" class="headerlink" title="使用future"></a>使用<strong>future</strong></h2><p>Python的新版本会引入新的功能，但是，实际上这些功能在上一个老版本中就已经存在了。要“试用”某一新的特性，就可以通过导入<strong>future</strong>模块的某些功能来实现。</p><p>future前后的下划线是两个_  -&gt; __</p><p>在Python 3.x中，字符串统一为unicode，不需要加前缀 u，而以字节存储的str则必须加前缀 b。利用<strong>future</strong>的unicode_literals在Python 2.7中编写unicode字符串。</p><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> unicode_literals</span><br><span class="line"></span><br><span class="line">s = <span class="string">'am I an unicode?'</span></span><br><span class="line"><span class="built_in">print</span> isinstance(s, unicode)</span><br></pre></td></tr></table></figure><h2 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h2><p><strong>创建对象</strong><br>class Person(object) : 这里的object可改为其他父类</p><p><strong>实例化对象</strong><br>p1 = Person() : 不需要new</p><p><strong>实例化属性</strong><br>p1.name = “小明” : 对象的属性可以直接添加，不用类似java那种每个对象类都创建了属性之后才可以使用。因为python是动态语言。</p><p>如果要使用类似Java构造方法的那种，看下一点</p><p><strong>初始化实例属性</strong><br>如果Person类应该在创建的时候就拥有 name、gender 和 birth 属性，那么我们在定义 Person 类时，可以为Person类添加一个<strong>init</strong>()方法，当创建实例时，<strong>init</strong>()方法被自动调用，我们就能在此为每个实例都统一加上以下属性：<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>(<span class="title">object</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(<span class="keyword">self</span>, name, gender, birth)</span></span><span class="symbol">:</span></span><br><span class="line">        <span class="keyword">self</span>.name = name</span><br><span class="line">        <span class="keyword">self</span>.gender = gender</span><br><span class="line">        <span class="keyword">self</span>.birth = birth</span><br></pre></td></tr></table></figure></p><p>注意：这里的self参数是必须添加的，但是对外暴露的参数只有后面三个，也就是调用时只需要填写后面的三个参数</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">p1</span> = Person(<span class="string">'name'</span>, <span class="string">'man'</span>, <span class="string">'2012'</span>)</span><br></pre></td></tr></table></figure><p>而一旦使用了__init__方法，调用时就必须要具备参数了</p><h2 id="访问限制"><a href="#访问限制" class="headerlink" title="访问限制"></a>访问限制</h2><p>Python对属性权限的控制是通过属性名来实现的，如果一个属性由双下划线开头(__)，该属性就无法被外部访问。</p><p>单下划线 　-&gt;　表示保护　-&gt;    从外部不能导入，from xx import xxx<br>双下划线　-&gt;　表示私有　-&gt;　子类无法继承<br>前后双下划线  -&gt; 在Python中表示特殊功能的函数，一般自己定义不要使用这种方式。入__init__(self, options)方法<br>例如__init__方法,如果去掉前面的双下划线，p1.init就可以用了</p><h2 id="将函数变为方法"><a href="#将函数变为方法" class="headerlink" title="将函数变为方法"></a>将函数变为方法</h2><p>在Python中方法也是一个属性，所以，它也可以动态地添加到实例上，只是需要用 types.MethodType() 把一个函数变为一个方法。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">import types</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fn_get_grade</span><span class="params">(<span class="keyword">self</span>)</span></span><span class="symbol">:</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">self</span>.score &gt;= <span class="number">80</span><span class="symbol">:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">'A'</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">self</span>.score &gt;= <span class="number">60</span><span class="symbol">:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">'B'</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">'C'</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>(<span class="title">object</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(<span class="keyword">self</span>, name, score)</span></span><span class="symbol">:</span></span><br><span class="line">        <span class="keyword">self</span>.name = name</span><br><span class="line">        <span class="keyword">self</span>.score = score</span><br><span class="line"></span><br><span class="line">p1 = Person(<span class="string">'Bob'</span>, <span class="number">90</span>)</span><br><span class="line">p1.get_grade = types.MethodType(fn_get_grade, p1, Person)</span><br><span class="line">print p1.get_grade()</span><br><span class="line"><span class="comment"># =&gt; A</span></span><br><span class="line">p2 = Person(<span class="string">'Alice'</span>, <span class="number">65</span>)</span><br><span class="line">print p2.get_grade()</span><br><span class="line"><span class="comment"># ERROR: AttributeError: 'Person' object has no attribute 'get_grade'</span></span><br><span class="line"><span class="comment"># 因为p2实例并没有绑定get_grade</span></span><br></pre></td></tr></table></figure><h2 id="定义类方法"><a href="#定义类方法" class="headerlink" title="定义类方法"></a>定义类方法</h2><p>在class中定义的全部是实例方法，实例方法第一个参数 self 是实例本身。</p><p>要在class中定义类方法，需要这么写：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span><span class="params">(object)</span>:</span></span><br><span class="line">    count = <span class="number">0</span></span><br><span class="line">    </span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">how_many</span><span class="params">(cls)</span>:</span></span><br><span class="line">    <span class="comment">#类方法的第一个参数将传入类本身，通常将参数名命名为 cls</span></span><br><span class="line">        <span class="keyword">return</span> cls.count</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name)</span>:</span></span><br><span class="line">        self.name = name</span><br><span class="line">        Person.count = Person.count + <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> Person.how_many()</span><br><span class="line">p1 = Person(<span class="string">'Bob'</span>)</span><br><span class="line"><span class="keyword">print</span> Person.how_many()</span><br></pre></td></tr></table></figure></p><p>上面的 cls.count 实际上相当于 Person.count</p><h2 id="继承与拥有"><a href="#继承与拥有" class="headerlink" title="继承与拥有"></a>继承与拥有</h2><p>Python中每个类必须继承，如果没有合适的父类，就用object<br>has 表明拥有。student和book是一个拥有的关系</p><p>在继承完成之后，__init__()方法中记得使用SonClass.__init__(父类初始化函数的参数)初始化父类的相关属性及方法,SonClass表明子类的类名称<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>(<span class="title">object</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(<span class="keyword">self</span>, name, gender)</span></span><span class="symbol">:</span></span><br><span class="line">        <span class="keyword">self</span>.name = name</span><br><span class="line">        <span class="keyword">self</span>.gender = gender</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span>(<span class="title">Person</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(<span class="keyword">self</span>, name, gender, score)</span></span><span class="symbol">:</span></span><br><span class="line">        SonClass.__init_<span class="number">_</span>(name, gender)</span><br><span class="line">        <span class="keyword">self</span>.score = score</span><br></pre></td></tr></table></figure></p><h2 id="判断类型-isinstance"><a href="#判断类型-isinstance" class="headerlink" title="判断类型 isinstance"></a>判断类型 isinstance</h2><p>用于判断某一个类是否为另一个父类（完成继承之后，这个类可以叫做本类也可以叫做父类）。例如Student继承自Person,继承完成之后Student可以称为Person类型，也可以称为Student。用isinstance(s, Person)的返回值为true</p><h2 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h2><p>基本和java一样，根据不同的子类对象显示不同的结果</p><p>额外的：<br>由于Python是动态语言，所以任何类型的实例都可以，只要它有一个同名的方法即可：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#Python提供了open()函数来打开一个磁盘文件，并返回 File 对象。File</span></span><br><span class="line"><span class="comment">#对象有一个read()方法可以读取文件内容：</span></span><br><span class="line"><span class="comment">#例如，从文件读取内容并解析为JSON结果：</span></span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line">f = open(<span class="string">'/path/to/file.json'</span>, <span class="string">'r'</span>)</span><br><span class="line"><span class="keyword">print</span> json.load(f)</span><br><span class="line"></span><br><span class="line"><span class="comment">#由于Python的动态特性，json.load()并不一定要从一个File对象读取内</span></span><br><span class="line"><span class="comment">#容。任何对象，只要有read()方法，就称为File-like Object，都可以传给#json.load()。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Students</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">read</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">r'["Tim", "Bob", "Alice"]'</span></span><br><span class="line"></span><br><span class="line">s = Students()</span><br><span class="line"><span class="keyword">print</span> json.load(s)</span><br><span class="line"></span><br><span class="line"><span class="comment">#[u'Tim', u'Bob', u'Alice']</span></span><br></pre></td></tr></table></figure><h2 id="多重继承"><a href="#多重继承" class="headerlink" title="多重继承"></a>多重继承</h2><p>详情请看下一篇博文：　<a href="http://blog.csdn.net/jonstank2013/article/details/50754834" target="_blank" rel="noopener">Python学习笔记(四) 多重继承及内部算法解析</a></p><h2 id="定制类和特殊方法"><a href="#定制类和特殊方法" class="headerlink" title="定制类和特殊方法"></a>定制类和特殊方法</h2><p><strong>__str__()</strong><br> 如果要把一个类的实例变成 str，就需要实现,类似于Java中的toString()方法，可以重写，然后在其中返回自己想要的结果。<br> print list　其实是 print list.__str__()</p><p><strong>__repr__()</strong><br>Python 定义了__str__()和__repr__()两种方法，__str__()用于显示给用户，而__repr__()用于显示给开发人员。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#有一个偷懒的定义__repr__的方法：</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>(<span class="title">object</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(<span class="keyword">self</span>, name, gender)</span></span><span class="symbol">:</span></span><br><span class="line">        <span class="keyword">self</span>.name = name</span><br><span class="line">        <span class="keyword">self</span>.gender = gender</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(<span class="keyword">self</span>)</span></span><span class="symbol">:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">'(Person: %s, %s)'</span> % (<span class="keyword">self</span>.name, <span class="keyword">self</span>.gender)</span><br><span class="line">    __repr_<span class="number">_</span> = __str_<span class="number">_</span></span><br></pre></td></tr></table></figure><p><strong>__cmp__()</strong><br>对 int、str 等内置数据类型排序时，Python的 sorted() 按照默认的比较函数 cmp 排序，但是，如果对一组 Student 类的实例排序时，就必须提供我们自己的特殊方法 <strong>cmp\</strong>()</p><p><strong>__len__()</strong><br>如果一个类表现得像一个list，要获取有多少个元素，就得用 len() 函数。</p><p>要让 len() 函数工作正常，类必须提供一个特殊方法<strong>len</strong>()，它返回元素的个数。</p><p><strong>__slots__()</strong><br>如果要限制添加的属性，例如，Student类只允许添加 name、gender和score 这3个属性，就可以利用Python的一个特殊的<strong>slots</strong>来实现。<br>顾名思义，__slots__是指一个类允许的属性列表,类似与枚举。添加的属性只能是slots中列出的的值，多了就会报错</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span>(<span class="title">object</span>):</span></span><br><span class="line">    __slots_<span class="number">_</span> = (<span class="string">'name'</span>, <span class="string">'gender'</span>, <span class="string">'score'</span>)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(<span class="keyword">self</span>, name, gender, score)</span></span><span class="symbol">:</span></span><br><span class="line">        <span class="keyword">self</span>.name = name</span><br><span class="line">        <span class="keyword">self</span>.gender = gender</span><br><span class="line">        <span class="keyword">self</span>.score = score</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; s = Student(<span class="string">'Bob'</span>, <span class="string">'male'</span>, <span class="number">59</span>)</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; s.name = <span class="string">'Tim'</span> <span class="comment"># OK</span></span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; s.score = <span class="number">99</span> <span class="comment"># OK</span></span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; s.grade = <span class="string">'A'</span>　<span class="comment"># Error</span></span><br><span class="line">Traceback (most recent call last)<span class="symbol">:</span></span><br><span class="line">  ...</span><br><span class="line"><span class="symbol">AttributeError:</span> <span class="string">'Student'</span> object has no attribute <span class="string">'grade'</span></span><br></pre></td></tr></table></figure><p><strong>__call__()</strong><br>在Python中，函数其实是一个对象：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;</span>&gt; f = abs</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; f.__name_<span class="number">_</span></span><br><span class="line"><span class="string">'abs'</span></span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; f(-<span class="number">123</span>)</span><br><span class="line"><span class="number">123</span></span><br></pre></td></tr></table></figure><p>由于 f 可以被调用，所以，f 被称为可调用对象。</p><p>所有的函数都是可调用对象。</p><p>一个类实例也可以变成一个可调用对象，只需要实现一个特殊方法__call__()。</p><p>把 Person 类变成一个可调用对象：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>(<span class="title">object</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(<span class="keyword">self</span>, name, gender)</span></span><span class="symbol">:</span></span><br><span class="line">        <span class="keyword">self</span>.name = name</span><br><span class="line">        <span class="keyword">self</span>.gender = gender</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__call__</span><span class="params">(<span class="keyword">self</span>, friend)</span></span><span class="symbol">:</span></span><br><span class="line">        print <span class="string">'My name is %s...'</span> % <span class="keyword">self</span>.name</span><br><span class="line">        print <span class="string">'My friend is %s...'</span> % friend</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; p = Person(<span class="string">'Bob'</span>, <span class="string">'male'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; p(<span class="string">'Tim'</span>)</span><br><span class="line">My name is Bob...</span><br><span class="line">My friend is Tim...</span><br></pre></td></tr></table></figure><p>单看 p(‘Tim’) 你无法确定 p 是一个函数还是一个类实例，所以，在Python中，函数也是对象，对象和函数的区别并不显著。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;安装第三方模块&quot;&gt;&lt;a href=&quot;#安装第三方模块&quot; class=&quot;headerlink&quot; title=&quot;安装第三方模块&quot;&gt;&lt;/a&gt;安装第三方模块&lt;/h2&gt;&lt;p&gt;python 2.7.9版本内置pip，官方推荐。在命令行中使用&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;pip 
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://yoursite.com/2018/02/11/Python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0(%E5%9B%9B)%20%E5%A4%9A%E9%87%8D%E7%BB%A7%E6%89%BF%E5%8F%8A%E5%86%85%E9%83%A8%E7%AE%97%E6%B3%95%E8%A7%A3%E6%9E%90/"/>
    <id>http://yoursite.com/2018/02/11/Python学习笔记(四) 多重继承及内部算法解析/</id>
    <published>2018-02-11T09:40:28.396Z</published>
    <updated>2018-02-11T09:40:28.396Z</updated>
    
    <content type="html"><![CDATA[<h2 id="多重继承"><a href="#多重继承" class="headerlink" title="多重继承"></a>多重继承</h2><p>Python可实现多重继承<br><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="type">Student</span>(<span class="type">A</span>,<span class="type">B</span>)</span></span><br><span class="line"><span class="class">    def __init__(<span class="title">self</span>, <span class="title">a</span>, <span class="title">b</span>, <span class="title">c</span>):</span></span><br><span class="line"><span class="class">        <span class="type">A</span>.__init__(<span class="title">a</span>)</span></span><br><span class="line"><span class="class">        <span class="type">B</span>.__init__(<span class="title">b</span>)</span></span><br></pre></td></tr></table></figure></p><p>存在的问题：<br>多重继承时如果两个父类存在同名方法如何解决：</p><p>Python的类分为经典类 和 新式类。<br>经典类是python2.2之前的东西,但是在2.7还在兼容,但是在3之后的版本就只承认新式类了。<br>新式类在python2.2之后的版本中都可以使用。<br>经典类和新式类的区别在于:</p><ul><li>经典类是默认没有派生自某个基类的,而新式类是默认派生自object这个基类的</li><li>经典类在类多重继承的时候是采用从左到右深度优先原则匹配方法的.而新式类是采用C3算法(不同于广度优先)进行匹配的</li><li>经典类是没有__MRO__和instance.mro()调用的,而新式类是有的。</li></ul><p>另外，现在是推荐采用新式类来代替经典类。因为经典类对于多重继承采用的从左到右深度优先匹配算法存在一些问题。也就是如果方法同名，有的时候会绕过一些想要访问的方法，只指向一个方法。</p><p>首先，先复习一下数据结构：<br>深度优先算法，广度优先算法，还有Python采用的C3算法</p><p><strong>深度优先算法</strong><br>可从某个定点v出发，访问此顶点，然后一次从v的违背访问的邻接点触发深度优先遍历图，直至途中所有和v有路径相同的顶点都被访问到；若此时途中尚有顶点未被访问，则另选途中一个未曾被访问的顶点做开始点。</p><p>通俗一点，就是从顶点开始遍历，从左到右。例如，先选顶点v，顶点v存在左右两个子节点v1, v2，就先选则左边的v1节点。这个时候就又可以把v1当成一个顶点来判断了，判断它是否有左右两个点，原理同上。等左边的节点v1包含它的所有子节点都被遍历完了之后，再开始右边节点v2的遍历，此时又把v2当成一个顶点。<br><img src="http://img.blog.csdn.net/20160227122311980" alt="这里写图片描述"><br>图画得略微有点丑，将就看看。: )<br>这张图用深度优先算法来遍历就是： v1, v2, v4, v5, v3, v6<br>如果v3还存在一个左节点v7，那结果就是 v1, v2, v4, v5, v3, v7, v6</p><p><strong>广度优先算法</strong><br>通俗理解，就是按树的层次从左到右依次遍历。这一层遍历完了之后就开始遍历下一层，每一层都从左到右遍历<br><img src="http://img.blog.csdn.net/20160227122311980" alt="这里写图片描述"><br> 还是这张丑图 : )<br>用广度优先算法就是： v1, v2,v3,v4, v6, v5。一层层的来，从左到右</p><p><strong>C3算法</strong><br>有点类似与广度优先算法，但是存在一些区别。<br>例如，如果是上面的那张图的话，结果和广度优先是一样的（只是结果一样，算法原理不同）。但是由于算法存在一些区别，例如下一个例子就可以看出它们的区别了。<br>　<img src="http://img.blog.csdn.net/20160227122917066" alt="这里写图片描述"><br>这图大致的意思是： A有两个父类B和C，B类又有一个父类D，D类的父类是O，而父类C的直接父类是O，少掉了D类这一层。<br>这样的话用C3算法遍历出来的结果就是ABDCO，而广度优先算法则是ABCDO。</p><p>这里就要介绍一下C3算法的核心merge了。</p><blockquote><p>取第一个列表的头，也就是L[B,object] ，如果这个头不在任何表的尾部，那么将它加到Ｃｌａｓｓ D的线性化中，并且从合并中的列表里删除 ；否则查找下一个列表的头，如果是个好的表头则取出它。 需要注意的是： 表头指是第一个元素 ，尾部是指除表头之外的其它所有元素 。如[A,B,C,D,E,F],A是表头，[B,C,D,E,F]是尾部。</p></blockquote><p>这段话取自《python高级编程》<br>用一个更简单的例子来表示此算法。<br><img src="http://img.blog.csdn.net/20160227123533825" alt="这里写图片描述"></p><p>算法表达式：<br>L(D(B,C)) =  D + merge( [B,object] ,[C,object] , [B,C] )<br>               =  [D, B] + merge( [object], [C,object] , [C] )<br>               =  [D, B,C] + merge( [object] , [object] )<br>               =  [D, B,C,object]    </p><p>注解：</p><ul><li>第一行中列表[B,object]的表头是Ｂ，没有出现在其它表([C,object] 、[B,C] )的尾部。因此取出B并与D结合,  删除其余Ｂ  </li><li>第二行中列表[Ｃ,object]的表头是Ｃ，没有出现在其它表([object] 、[C] )的尾部 ，注意 [C] 这个列表只有表头，没有尾部。同样的，取出C与[D,B]结合，删除其余C<br>​<br>因此，这个图遍历的结果就是　D,B,C,A,Object</li></ul><h2 id="多重继承时同名方法的冲突问题"><a href="#多重继承时同名方法的冲突问题" class="headerlink" title="多重继承时同名方法的冲突问题"></a>多重继承时同名方法的冲突问题</h2><p>就上面的图来说，如果采用经典类，也就是使用深度优先算法，依次遍历的结果为 DBAC，　这样的话就存在一个问题。如果C重写了A当中的一个方法，那么只会调用A当中的方法而不会调用Ｃ的。<br>而使用新式类，也就是C3算法，遍历结果为DBCA。这样可以保证相邻父类的方法能够被优先遍历，如果不存在，才会调用更上一层的父类方法。</p><p>因此，新式类在这里首先就解决了一个优先顺序的问题，因为C很有可能重写了A的方法，而我们很多时候需要的就是C的方法。<br>第二个解决的问题就是单调性的问题。保证在不断的继承中同样能够保持顺序</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>这个C3算法是现在Python中已经封装好了的算法，当遇到多重继承的时候会自动选择该算法，这里总结归纳它只是为了了解它里面的层次与结构。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;多重继承&quot;&gt;&lt;a href=&quot;#多重继承&quot; class=&quot;headerlink&quot; title=&quot;多重继承&quot;&gt;&lt;/a&gt;多重继承&lt;/h2&gt;&lt;p&gt;Python可实现多重继承&lt;br&gt;&lt;figure class=&quot;highlight haskell&quot;&gt;&lt;table&gt;&lt;tr&gt;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://yoursite.com/2018/02/11/MVP%20%E6%B7%B1%E5%BC%95%E7%94%A8%E6%96%B9%E5%BC%8F%E7%9A%84%E7%AE%80%E5%8D%95%E5%AE%9E%E7%8E%B0/"/>
    <id>http://yoursite.com/2018/02/11/MVP 深引用方式的简单实现/</id>
    <published>2018-02-11T09:40:05.769Z</published>
    <updated>2018-02-11T09:40:05.770Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>每个框架都有各自的使用领域，要根据项目的实际情况合理的选择对应的框架以及设计模式。<br><strong>MVC</strong><br>Model-View-Controller<br>这种框架模式实现了Modle层与View的分离，将一些控制交由Controller类处理，这样就可以实现一定程度上的解耦。</p><pre><code>- Model层一般指的是数据，不管是从网络上接受到的数据还是内部产生的数据。- View层指的就是界面- Controller指的就是类似于管理类、</code></pre><p> Model将数据交由Controller, Controller类再将相关的信息交给View层处理。<br>Android模式就是一个比较典型的MVC框架，将View层与Model层和Controller分开。Android将Activity直接看做一个Controller，但是也正是因为这个原因，也产生一定的耦合度。<br>因为View层可以直接控制Model层，这也就产生了一定的耦合度，一个比较好的方式是所有的方式都由一个第三方管理或者是中介类去处理，这样的话可以实现耦合性的大幅度降低。一份代码，即使View层变了，代码也不需要变。同时代码的可维护性和拓展性也大大的增加了。因为这样一来，在Activity或者是Fragment中处理的逻辑更清晰，代码也更少了。</p><p><strong>MVP</strong><br>MVP是MVC的衍生物，从推出就受到了广泛关注。Model - View - Presenter<br>这一种方式是将Activity视为一个View层，处理的事务交由Presenter这个中介去处理。这样就实现了View - Presenter - Model的单链。较之于MVC来说具有更大的解耦性。</p><h2 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h2><p>MVP根据实现的方式分为深引用和弱引用。这一篇博客就以简单的登陆界面介绍深引用。</p><p>##深引用的实现##</p><ol><li>创建一个接口，这个接口是包含相关的事件处理方法。Activity中需实现该接口，然后将Activity传递给Presenter。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.testing.mvpdemo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">LoginDoInterface</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">showLoading</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">hideLoading</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">loginIn</span><span class="params">(String account, String password)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">loginSuccess</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">loginFailed</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>２. User类</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.testing.mvpdemo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">String</span> getAccount() &#123;</span><br><span class="line">        <span class="keyword">return</span> account;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> void setAccount(<span class="keyword">String</span> account) &#123;</span><br><span class="line">        <span class="built_in">this</span>.account = account;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">String</span> getPassword() &#123;</span><br><span class="line">        <span class="keyword">return</span> password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> void setPassword(<span class="keyword">String</span> password) &#123;</span><br><span class="line">        <span class="built_in">this</span>.password = password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">String</span> account;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">String</span> password;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> User(<span class="keyword">String</span> account, <span class="keyword">String</span> password) &#123;</span><br><span class="line">        <span class="built_in">this</span>.account = account;</span><br><span class="line">        <span class="built_in">this</span>.password = password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> User() &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>３. Model层</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">package com.example.testing.mvpdemo;</span><br><span class="line"></span><br><span class="line">public class LoginDoModle &#123;</span><br><span class="line"></span><br><span class="line">    public static<span class="built_in"> User user </span>= <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    public<span class="built_in"> User </span>getInstance() &#123;</span><br><span class="line">        <span class="keyword">if</span> (user == <span class="literal">null</span>) &#123;</span><br><span class="line">           <span class="built_in"> user </span>= new User();</span><br><span class="line">        &#125;</span><br><span class="line">        return user;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static void setUser(User user2) &#123;</span><br><span class="line">       <span class="built_in"> user </span>= user2;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static<span class="built_in"> User </span>getUser() &#123;</span><br><span class="line">        return user;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>４. Activity</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.testing.mvpdemo;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.os.Bundle;</span><br><span class="line"><span class="keyword">import</span> android.support.annotation.Nullable;</span><br><span class="line"><span class="keyword">import</span> android.support.v7.app.AppCompatActivity;</span><br><span class="line"><span class="keyword">import</span> android.util.Log;</span><br><span class="line"><span class="keyword">import</span> android.view.View;</span><br><span class="line"><span class="keyword">import</span> android.widget.Button;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span></span></span><br><span class="line"><span class="class">        <span class="keyword">implements</span> <span class="title">LoginDoInterface</span>, <span class="title">View</span>.<span class="title">OnClickListener</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> User user;</span><br><span class="line">    <span class="keyword">private</span> Button button_login;</span><br><span class="line">    <span class="keyword">private</span> LoginPresenter loginPresenter;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(@Nullable Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.xml_login);</span><br><span class="line"></span><br><span class="line">        init();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        user = <span class="keyword">new</span> User();</span><br><span class="line">        button_login = (Button) findViewById(R.id.button_login);</span><br><span class="line">        button_login.setOnClickListener(<span class="keyword">this</span>);</span><br><span class="line">        loginPresenter = <span class="keyword">new</span> LoginPresenter(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showLoading</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Log.d(<span class="string">"tag"</span>, <span class="string">"Loading......"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">hideLoading</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Log.d(<span class="string">"tag"</span>, <span class="string">"Loading successful or failed"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">loginIn</span><span class="params">(String account, String password)</span> </span>&#123;</span><br><span class="line">        Log.d(<span class="string">"tag"</span>, <span class="string">"Login"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">loginSuccess</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Log.d(<span class="string">"tag"</span>, <span class="string">"Log success"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">loginFailed</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Log.d(<span class="string">"tag"</span>, <span class="string">"Log failed"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">        loginPresenter.loginStart();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>Presenter<figure class="highlight pony"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">LoginPresenter</span> &#123;</span></span><br><span class="line"></span><br><span class="line">    private <span class="type">LoginDoInterface</span> loginDoInterface;</span><br><span class="line">    private <span class="type">LoginDoModle</span> loginDoModle;</span><br><span class="line"></span><br><span class="line">    public <span class="type">LoginPresenter</span>(<span class="type">LoginDoInterface</span> loginDoInterface) &#123;</span><br><span class="line">        <span class="literal">this</span>.loginDoInterface = loginDoInterface;</span><br><span class="line">        loginDoModle = <span class="function"><span class="keyword">new</span> <span class="title">LoginDoModle</span>();</span></span><br><span class="line"><span class="function">    &#125;</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">    <span class="title">public</span> <span class="title">void</span> <span class="title">loginStart</span>() &#123;</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">        <span class="title">loginDoInterface</span>.<span class="title">loginIn</span>(</span></span><br><span class="line"><span class="function">                loginDoModle.getInstance().<span class="title">getAccount</span>(),</span></span><br><span class="line"><span class="function">                <span class="title">loginDoModle</span>.<span class="title">getInstance</span>().<span class="title">getPassword</span>());</span></span><br><span class="line"><span class="function">        <span class="title">loginDoInterface</span>.<span class="title">showLoading</span>();</span></span><br><span class="line"><span class="function">        <span class="title">loginDoInterface</span>.<span class="title">loginSuccess</span>();</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">        <span class="title">loginFinish</span>();</span></span><br><span class="line"><span class="function">    &#125;</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">    <span class="title">public</span> <span class="title">void</span> <span class="title">loginFinish</span>() &#123;</span></span><br><span class="line"><span class="function">        <span class="title">loginDoInterface</span>.<span class="title">hideLoading</span>();</span></span><br><span class="line"><span class="function">        <span class="title">loginDoInterface</span>.<span class="title">loginFailed</span>();</span></span><br><span class="line"><span class="function">    &#125;</span></span><br><span class="line"><span class="function">&#125;</span></span><br></pre></td></tr></table></figure></li></ol><p>从这里可以看出，表面上需要编写的代码增多了（实际也增多了），自己也要添加更多的类。但是，从Activity的层面上来看，整个界面变清晰了，每个功能之间的界限也很明确，最重要的一点是，不管你的界面如何变化，哪怕是推翻了重来，Activity的代码是只需要改动一个click事件的，有的时候则还有可能完全不改动，一份代码对应多份界面。<br>同时，如果哪天项目需要增加功能或者维护，这样的方式也更清晰，更容易处理。</p><p>另外，对于深引用的方式来说，因为是直接把Activity传递过去的，如果产生了一个网络请求，而在请求未返回的时候Activity就已经被摧毁了。这时候就会造成内存泄露，而在这种情况下就建议使用弱引用的方式，将Presenter的绑定与解绑跟Activity以及Fragment的生命周期绑定起来。弱引用将会在下篇博客中进行介绍。</p><p><strong>建议</strong><br>一般小的或者是时间要求特别紧的项目可以暂不用MVP,MVC，MVVM这些框架,因为会产生很多的接口，工作量也有一定的增加。但是对于大中型项目，为了项目的可维护性和可拓展性，建议使用。而至于使用MVP, MVC还是MVVM，就要根据项目的实际情况来选择。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;p&gt;每个框架都有各自的使用领域，要根据项目的实际情况合理的选择对应的框架以及设计模式。&lt;br&gt;&lt;strong&gt;MVC&lt;/strong&gt;&lt;br&gt;M
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://yoursite.com/2018/02/11/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F_%E5%BD%92%E7%BA%B3/"/>
    <id>http://yoursite.com/2018/02/11/快速排序_归纳/</id>
    <published>2018-02-11T09:39:47.969Z</published>
    <updated>2018-02-11T09:39:47.969Z</updated>
    
    <content type="html"><![CDATA[<h2 id="算法思路"><a href="#算法思路" class="headerlink" title="算法思路"></a>算法思路</h2><ol><li>选取一个初始值</li><li>将所有比该初始值大的数置于初始值的右边，所有比该初始值小的数置于初始值的左边</li><li>循环以上操作，直到完成排序为止。</li></ol><p>##初级算法实现##<br>首先，第一轮循环时分为两步。<br>第一步：从最右边向左依次遍历，查找比初始值小的数，找到之后，更改arr[left]的值, 同时 left ++，即把小的数扔到左边去<br>第二步：从最左边向右依次遍历，查找比初始值大的数，找到之后，更改arr[right]的值, 同时 right –，即把大的数扔到右边去。<br>第三步：判断整个数组的排序是否结束，如果没有结束，就依次循环排序<br>这里 left++ 及 right– 的意思是，由于这一轮排序我们只需要让初始值左边的数均小于初始值，右边的数均大于初始值，因此找到符合条件的数后直接扔到初始值的左边或者右边，而不需要理会扔过去后的大小排序问题，这一轮我们只负责初始值的排序及定位。而在扔过去了之后，此次循环中那一位就不用再判断了，因此++或–。当left与right相等时，表示到了中间点，将其赋值为初始值即可。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Quicksort</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MAXSIZE = <span class="number">30</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[MAXSIZE];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; MAXSIZE; i++) &#123;</span><br><span class="line">arr[i] = <span class="keyword">new</span> Random().nextInt(MAXSIZE);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">"修改前"</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i : arr) &#123;</span><br><span class="line">System.out.print(i + <span class="string">" "</span>);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">""</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Quicksort().sortMethodOne(<span class="number">0</span>, arr.length - <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">"修改后"</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i : arr) &#123;</span><br><span class="line">System.out.print(i + <span class="string">" "</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> arr</span></span><br><span class="line"><span class="comment"> *            目标数组</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> min</span></span><br><span class="line"><span class="comment"> *            排序的数组的起始位</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> max</span></span><br><span class="line"><span class="comment"> *            排序的数组的结束位</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">sortMethodOne</span><span class="params">(<span class="keyword">int</span> min, <span class="keyword">int</span> max)</span> </span>&#123;</span><br><span class="line"><span class="comment">// 一个临时变量，用于记录数组左边的位置</span></span><br><span class="line"><span class="keyword">int</span> left = min;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 一个临时变量，用于记录数组右边的位置</span></span><br><span class="line"><span class="keyword">int</span> right = max;</span><br><span class="line"></span><br><span class="line"><span class="comment">// tempNumber很重要，用于记录初始点的数值，并在每次循环判断中将对应位置的值与之进行比较</span></span><br><span class="line"><span class="keyword">int</span> tempNumber = arr[left];</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (left &lt; right) &#123;</span><br><span class="line"><span class="comment">// 第一步：先从右边向左遍历，找到一个比tempNumber小的数</span></span><br><span class="line"><span class="keyword">while</span> (left &lt; right &amp;&amp; arr[right] &gt;= tempNumber) &#123;</span><br><span class="line">right--;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 找到后将arr[right]赋值给arr[left]</span></span><br><span class="line">arr[left] = arr[right];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 第二步：从左向右遍历，找到一个比tempNumber大的数</span></span><br><span class="line"><span class="keyword">while</span> (left &lt; right &amp;&amp; arr[left] &lt;= tempNumber) &#123;</span><br><span class="line">left++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 找到后将arr[left]赋值给arr[right]</span></span><br><span class="line">arr[right] = arr[left];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 中间数赋值</span></span><br><span class="line">arr[left] = tempNumber;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 遍历整理左边的数</span></span><br><span class="line"><span class="keyword">if</span> (left &gt; min) &#123;</span><br><span class="line">sortMethodOne(min, left - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 遍历整理右边的数</span></span><br><span class="line"><span class="keyword">if</span> (right &lt; max) &#123;</span><br><span class="line">sortMethodOne(left + <span class="number">1</span>, max);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>##算法优化##</p><p><strong>方法一：　三数取中间值</strong><br>思路：取最左边的数A，中间位置的数B，最右边的数C，将他们进行一个排序，取中间的值作为初始值。<br>例如：<br>int[] temp = { 9, 5, 6, 8, 4, 3, 2, 7, 1 }交换后的结果为{ 1, 5, 6, 8, 4, 3, 2, 7, 9 },这样的话就相当于是只交换了1和9的位置，而我们又依次循环了很多次，效率比起来的话肯定就太低了。从概率上来讲，通过三数取中间值的效率是最高的，可以避免取到的初始值一开始就为极端数的情况，一定程度上可以提升运行的效率。</p><p><strong>方法二：　双向遍历</strong><br><strong>方法三：　减少交换次数</strong></p><p>优化方法在这里只是一个提点，具体如何实现以及其他的优化可以视情况而定，多个优化方法也可以视情况整合，这个就看自己了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;算法思路&quot;&gt;&lt;a href=&quot;#算法思路&quot; class=&quot;headerlink&quot; title=&quot;算法思路&quot;&gt;&lt;/a&gt;算法思路&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;选取一个初始值&lt;/li&gt;
&lt;li&gt;将所有比该初始值大的数置于初始值的右边，所有比该初始值小的数置于初始值的左边&lt;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://yoursite.com/2018/02/11/%E5%AD%90%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%9F%A5%E6%89%BE%E7%AE%97%E6%B3%95_%E5%BD%92%E7%BA%B3%E5%8F%8A%E6%B1%87%E6%80%BB/"/>
    <id>http://yoursite.com/2018/02/11/子字符串查找算法_归纳及汇总/</id>
    <published>2018-02-11T09:39:12.968Z</published>
    <updated>2018-02-11T09:39:12.968Z</updated>
    
    <content type="html"><![CDATA[<p>字符串的一种基本操作就是子字符串查找：给定一段长度为N的文本和一段长度为M的模式字符串，在文本中找到一个和该模式相符的字符串。</p><blockquote><p>模式-&gt; ABCDE<br>正文-&gt; SJAHDJKS”ABCDE”QWIYUE</p></blockquote><p>上文加引号处就是被搜索出来的结果。<br>相信这个大家肯定是经常遇到的吧，不管是使用　“CTRL+F”　搜索还是在一些搜索栏中搜索一段文字，将包含该文字的书籍输出中，我们都会遇到，所以在这里对子字符串的查找算法进行一个归纳及汇总。</p><p>##暴力子字符串查找算法##</p><p>这种算法是一种比较简单而使用广泛的暴力算法，在最坏的情况下运行时间与MN成正比，但是在许多的正常情况下，它的实际运行时间一般与M+N成正比（在不同情况下，与M+N成正比的概率越高，就越好）。</p><p><strong>算法思路</strong><br>将模式文本的首字母一个个的与文本进行比较，如果相同就比较模式文本的下一个字母，如果在N-M的循环中还没有找到，则表明不匹配，结束循环。这里N-M次循环是因为M为模板文本的长度，N为文本的长度，超过这个数值的话剩下的字符串长度肯定小于M的，就肯定不匹配。因此就不用比较了</p><p><strong>代码实现</strong></p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 暴力子字符串查找算法</span></span><br><span class="line"><span class="comment"> * 利用两层循环</span></span><br><span class="line"><span class="comment"> * 一个变量跟踪正文文本，一个变量跟踪模板文本</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * @param pat</span></span><br><span class="line"><span class="comment"> *            模板文本</span></span><br><span class="line"><span class="comment"> * @param txt</span></span><br><span class="line"><span class="comment"> *            正文文本</span></span><br><span class="line"><span class="comment"> * @return</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">String</span> search(<span class="keyword">String</span> pat, <span class="keyword">String</span> txt) &#123;</span><br><span class="line"><span class="keyword">int</span> M = pat.length();</span><br><span class="line"><span class="keyword">int</span> N = txt.length();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 用j来跟踪模板文本</span></span><br><span class="line"><span class="keyword">int</span> j = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 用i来跟踪正文文本</span></span><br><span class="line"><span class="built_in">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N - M; i++) &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 依次匹配，一个字符一个字符的匹配</span></span><br><span class="line"><span class="comment">// 如果匹配成功，就返回i的值</span></span><br><span class="line"><span class="built_in">for</span>(j = <span class="number">0</span>; j &lt; M; j++) &#123;</span><br><span class="line"><span class="built_in">if</span> (txt.charAt(i+j) != pat.charAt(j)) &#123;</span><br><span class="line"><span class="built_in">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">if</span> (j == M) &#123;</span><br><span class="line"><span class="built_in">return</span> <span class="string">"找到匹配文本，索引位置为: "</span> + i;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">return</span> <span class="string">"未找到匹配文本, 正文文本长度为"</span> + N;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这一段代码只进行了一个简单的示例，根据需要可以对其进行一个优化，比如说在j的for循环中，就算是整个字符串都被匹配了，仍然后遍历后面的字符串，这就没有必要了。因此可以设置一个标志位，如果整个模板文本已经匹配成功的话就设置标志位为true,同时返回。</p><p>当然了，上面的这段代码是只进行一次字符串的重复匹配，就算一个正文文本中存在多个模板文本，也只会搜索出一个，因为搜索到一个之后就return了，根据自己的需要可以再进行算法的优化及更新，因为这篇博客只是一个算法的归纳及汇总，思路及逻辑最重要，就不涉及过多单一算法的优化了，下面介绍的算法类同。</p><p><strong>可能出现的问题</strong><br>例如模板字符串为: ABCD<br>正文字符串为: AAAAAAAAAAQWEYUQIWABCDISDYQIU<br>这种算法主要存在的问题就是，如果模板字符串存在一连串的A开头，那么对应的查找就会变得慢了。<br>总结一下：算法的匹配效率不恒定，正常情况下没问题，极端情况下可能会很慢</p><p>##KMP子字符串查找算法##<br>这个算法（俗称看毛片算法）需要对模式字符串进行预处理，这里就只归纳一下思路。</p><p><strong>思路</strong><br>KMP算法的基本思想是当出现不匹配时，就能知晓一部分文本的内容(因为匹配失败之前它们已经和模板文本匹配，除了第一次匹配就失败的)。我们就可以利用这些信息避免将指针回退到所有这些已知的字符之前。</p><blockquote><p>例如：<br>模板文本为:BAAAAAAA<br>正文文本中又只存在A,B两个字符<br>党我们开始匹配的时候，如果已经匹配了模板文本中的5个字符，第6个匹配失败，当发现不匹配的字符时，可以指导文本中的前6个字符肯定是BAAAAB（前５个匹配，第６个失败），文本指针现在指向的是第六个字符B。在这个时候，我们就不用回退文本指针了，因为匹配的前４个正文文本字符都是Ａ，与模式的第一个字符不匹配，因此，就可以直接从当前位置开始下一次的循环判断 。</p></blockquote><p>这个理起来有点乱，多熟悉一下就好了，简单理解就是如果匹配失败，而当前文本索引所在位置的字符又是模板文本的开头时，我们不必回退文本指针到第二个位置再依次判断了，而可以根据一个记录来确定我们回退到哪个位置，这在一定程度上减少了循环的次数，提升了效率。</p><p>而至于上面的回退方法，其实是利用了一个next数组来实现，通过这个数组我们就可以知道每次回退需要退到哪个位置。</p><p>next数组的求法：<br>将当前序号，例如5前面的4个字符截取出来，然后顺数3个和倒数3个进行比较，如果相同，n就等于3.如果不同就用顺数2个和倒数2个比较，直到为0。<br>例如： abcde，现在指到了e，那么我们就用abc与bcd比较，它们不相同，就再比较ab与cd，还是不同，就比较a与d。这样就可以得出一个关于n的数组了</p><p>##Boyer-Moore字符串查找算法##<br>这种算法一般只会检查文本字符串中的一部分字符，现在许多的文本编辑器都使用了这个算法，用以显著的降低字符串查找的响应时间。</p><p><strong>思路</strong><br>当可以在文本字符串中回退时，如果可以从右向左扫描模板字符串并将它和正文文本匹配，那么这种字符串查找算法的速度就会非常快。</p><blockquote><p>例如：<br>在查找字符串BAABBAA时，如果匹配了第7个和第６个字符，但是在第５个字符处匹配失败，那么马上就可以将模板文本向右移动7个位置并继续检查文本中的第14个字符。这是因为部分匹配找到了XAA而X不是B,而这三个字符在模板文本中是唯一的</p></blockquote><p>这种算法跟上面的KMP的实现类似，也需要一个记录重启位置的数组</p><p>##Rabin-Karp指纹字符串查找算法##<br>这是一种基于散列（也就是Hash）的字符串查找算法，它与暴力算法几乎一样简单但是运行时间与M+N成正比的概率极高。此外，这种算法还可以拓展到二维的模板文本和正文文本中，这让它更适合于图像处理。</p><blockquote><p>我们需要计算模板文本的散列函数，然后用相同的散列函数计算文本中所有可能的M个字符的子字符串散列值并寻找匹配。如果找到了一个散列值和模板文本相同的子字符串，那么再继续验证两者是否匹配。<br>可以理解为将模板文本保存在一张散列表中，然后在文本的所有字符串中进行查找。但不需要为散列表预留任何空间，因为它只包含一个元素。</p></blockquote><p>如果直接利用上面的这段描述来实现代码的话肯定是不行的，因为计算散列值将会涉及到字符串中的每个字符，成本肯定是比直接比较字符要高。而RK算法就是一种能够在常数时间内算出M个字符的子字符串散列值的方法(需要预处理)，　这样就得到了一种能够在实际应用中的运行时间为线性级别的字符串查找算法。</p><p><strong>思路</strong><br>长度为Ｍ的字符串对应着一个R进制的M位数，为了用一张大小为Ｑ的散列表来保存这种类型的键，需要一个能够将R进制的M位数转化为一个0到Q-1之间的int值散列函数。这里就可以使用到除留余数法： 将该数除以Q并取余。在实际中会使用一个随机的素数Q，在不溢出的情况下选择一个尽可能大的值（因为并不是真的需要一张散列表）。</p><p>简单理解一下：用一个较小的Q和R=10也就是十进制的情况来举例子。<br>要在正文：　3 1 4 1 5 9 2 6 5 3 5 8 9 7 9 3中找到模板文本2 6 5 3 5，首先就要选择散列表的大小Q，Q在这里为997,则散列值为 26535 % 997 = 613，然后计算文本中所有长度为5个数字的子字符串的散列值并寻找匹配。<br>31415 % 997<br>14159 % 997<br>41592 % 997<br>…..<br>最后当求到26535时，与模板文本匹配，因此就可以找到了</p><p>##总结##<br>根据不同的需要选择不同的算法和模式我觉得才是最重要的，这些算法只要能够理解原理，那么在以后用到的时候也能够很快的运用到项目中去，毕竟在很多非算法要求特别高的工程中很有可能用不到很优秀算法，久了不用肯定是会忘的，但是只要懂了思想，哪怕是忘了如何用代码实现，在使用时也可以很快的熟悉它。这也是我总结算法的一个原因吧，思想及原理最重要。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;字符串的一种基本操作就是子字符串查找：给定一段长度为N的文本和一段长度为M的模式字符串，在文本中找到一个和该模式相符的字符串。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;模式-&amp;gt; ABCDE&lt;br&gt;正文-&amp;gt; SJAHDJKS”ABCDE”QWIYUE&lt;/p&gt;
&lt;/
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://yoursite.com/2018/02/11/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F_%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/"/>
    <id>http://yoursite.com/2018/02/11/设计模式_单例模式/</id>
    <published>2018-02-11T09:38:55.858Z</published>
    <updated>2018-02-11T09:38:55.858Z</updated>
    
    <content type="html"><![CDATA[<p>顾名思义，单例对象的类必须保证只有一个实例存在，这有利于我们协调系统整体的行为。</p><p>例如在Volley框架中，存在一个RequestQueue队列，这个队列中含有线程池，缓存系统，网络请求等，很消耗资源，因此我们最好不要让它构造多个实例。</p><p>使用场景<br>-<br>确保某个类有且只有一个对象的场景，避免多个对象消耗过多的资源，或者某种类型的对象只应该有且只有一个。例如：要创建的对象消耗过多的资源，访问IO和数据库等资源等等</p><p>实现<br>-<br>懒汉模式：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">public class Singleton&#123;</span><br><span class="line">private static Singleton instance;</span><br><span class="line">private Singleton()&#123;&#125;</span><br><span class="line"></span><br><span class="line">public static Singleton getInstance()&#123;</span><br><span class="line"><span class="keyword">if</span>(instance == <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="built_in">instance </span>= new Singleton();</span><br><span class="line">&#125;</span><br><span class="line">return instance;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这是单例模式的一种最简单实现<br>但其实在实际的使用中，可能就会面临如下的问题：单线程时正常，而遇到多线程时就会出现多个实例了，因此我们需要对其进行优化。</p><p>优化方式<br>-<br><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> <span class="function">Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (singleton == <span class="keyword">null</span>) &#123;  </span><br><span class="line">          singleton = <span class="keyword">new</span> Singleton(); </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">return</span> singleton; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>但这种方式仍存在问题： 即使instance已经被初始化，每次调用getInstance方法的时候都会进行同步，这样会消耗不必要的资源。<br>PS: synchronized关键字添加到方法上有点小题大做，也可以更改为只锁定实例的代码，这样就会使用到双重检查锁定(Double Check Lock)，而DCL方法虽然在一定程度上解决了资源消耗，多余同步，线程安全等问题，但是在某些情况下还是会出现失效（因为Java编译器允许处理器乱序执行），因此在这里就不做过多的总结了。而这种的实现方式也是一般不建议使用的</p><p>静态内部类单例模式<br>-<br>这种的实现方式也是推荐使用的一种方式。当第一次加载Singleton类时并不会初始化sInstance,只有在第一次调用getInstance方法时才会导致sInstance被初始化，因此，第一次调用getInstance方法会导致虚拟机加载SingletonHolder类，这种方式不仅能够确保线程安全，也能够保证单例对象的唯一性，同时也延迟了单例的实例化。</p><p>由于java的加载特性，会在使用的时候才会动态加载，同时加载的时候会默认保持同步，这也就有了这种延迟加载的方式<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> SingletonHolder.sInstance;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonHolder</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Singleton sInstance = <span class="keyword">new</span> Singleton();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>上述方法的共同不足<br>-<br>以上的两种方法都存在一个相同的情况：当它们遇到反序列化时，均会重新创建对象。<br>通过序列化可以将一个单例的实例对象写到磁盘，然后再读回来，从而有效地获得一个实例。即使构造函数是私有的，反序列化时仍然可以通过特殊的途径去创建类的一个新的实例，相当于调用该类的构造函数。<br>而上述的创建方法中，如果要杜绝单例对象在被反序列化时重新生成对象，那么在实现序列化方法的类中就必须加入一个readResolve()方法，这个方法可以让开发人员控制对象的反序列化</p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="function">Object <span class="title">readResolve</span><span class="params">()</span> <span class="keyword">throws</span> ObjectStreamException</span>&#123;</span><br><span class="line"><span class="keyword">return</span> SingletonHolder.sInstance;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样当JVM从内存中反序列化地”组装”一个新对象时,就会自动调用这个 readResolve方法来返回我们指定好的对象了, 单例规则也就得到了保证</p><p>枚举实现单例<br>-<br>枚举有一下的几个优点：</p><ol><li>写法简单</li><li>默认枚举实例的创建是线程安全的，并且在任何情况下它都是一个单例</li></ol><p>对于枚举来说，就不必关心反序列化时会重新创建一个对象了。<br><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">public <span class="class"><span class="keyword">enum</span> <span class="title">SingletonEnum</span> &#123;</span></span><br><span class="line">INSTANCE;</span><br><span class="line">public void doSomething()&#123;</span><br><span class="line">/<span class="regexp">/.....</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure></p><p>总结<br>-<br>我觉得在单例模式中现在最好的方式就是延迟加载的方式创建了吧。枚举方式创建虽然在java中很好，effetive java虽然也推荐，但是并不是特别适合Android，因为在Android中，枚举所产生的消耗是static的两倍，所以我觉得单例模式的话使用延迟加载的方式创建还是不错的，做好反序列化的readResolve()返回值的设定就好了</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;顾名思义，单例对象的类必须保证只有一个实例存在，这有利于我们协调系统整体的行为。&lt;/p&gt;
&lt;p&gt;例如在Volley框架中，存在一个RequestQueue队列，这个队列中含有线程池，缓存系统，网络请求等，很消耗资源，因此我们最好不要让它构造多个实例。&lt;/p&gt;
&lt;p&gt;使用场景
      
    
    </summary>
    
    
  </entry>
  
</feed>
