<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hello! CytQ</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://imlzq.com/"/>
  <updated>2018-04-27T08:48:05.948Z</updated>
  <id>http://imlzq.com/</id>
  
  <author>
    <name>CytQ</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>HTTPS</title>
    <link href="http://imlzq.com/2016/01/30/HTTPS/"/>
    <id>http://imlzq.com/2016/01/30/HTTPS/</id>
    <published>2016-01-30T15:24:18.000Z</published>
    <updated>2018-04-27T08:48:05.948Z</updated>
    
    <content type="html"><![CDATA[<p>https</p><a id="more"></a>    <p>HTTPS是在HTTP的基础上和ssl/tls证书结合起来的一种协议,保证了传输过程中的安全性,减少了被恶意劫持的可能.解决了http的三个缺点（被监听、被篡改、被伪装）</p><h2 id="对称加密和非对称加密"><a href="#对称加密和非对称加密" class="headerlink" title="对称加密和非对称加密"></a>对称加密和非对称加密</h2><ul><li>对称加密<ul><li>即加密的密钥和解密的密钥相同,</li></ul></li><li>非对称加密<ul><li>非对称加密将密钥分为公钥和私钥,公钥可以公开,私钥需要保密,客户端公钥加密的数据,服务端可以通过私钥来解密</li></ul></li></ul><h2 id="证书"><a href="#证书" class="headerlink" title="证书"></a>证书</h2><p>SSL证书里面包含了网站的域名，证书有效期，证书的颁发机构以及用于加密传输密码的公钥等信息。</p><p>实际上，我们使用的证书分很多种类型，SSL证书只是其中的一种。证书的格式是由X.509标准定义。</p><p>SSL证书负责传输公钥，是一种PKI（Public Key Infrastructure，公钥基础结构）证书。</p><p>常见的证书根据用途不同大致有以下几种：</p><ul><li>SSL证书：用于加密HTTP协议，也就是HTTPS。</li><li>代码签名证书：用于签名二进制文件，比如Windows内核驱动，Firefox插件，Java代码签名等等。</li><li>客户端证书：用于加密邮件。</li><li>双因素证书：网银专业版使用的USB Key里面用的就是这种类型的证书。</li></ul><p>这些证书都是由受认证的证书颁发机构——我们称之为CA（Certificate Authority）机构来颁发，针对企业与个人的不同，可申请的证书的类型也不同，价格也不同。CA机构颁发的证书都是受信任的证书，对于SSL证书来说，如果访问的网站与证书绑定的网站一致就可以通过浏览器的验证而不会提示错误。</p><h2 id="握手"><a href="#握手" class="headerlink" title="握手"></a>握手</h2><ul><li>1）客户端将自己支持的一套加密规则发送给网站。 </li><li>2）网站从中选出一组加密算法与HASH算法，并将自己的身份信息以证书的形式发回给客户端。证书里面包含了网站地址，加密公钥，以及证书的颁发机构等信息。  </li><li>3）客户端获得网站证书之后浏览器要做以下工作：<ul><li>a) 验证证书的合法性（颁发证书的机构是否合法，证书中包含的网站地址是否与正在访问的地址一致等），如果证书受信任，则浏览器栏里面会显示一个小锁头，否则会给出证书不受信的提示。</li><li>b) 如果证书受信任，或者是用户接受了不受信的证书，客户端会生成一串随机数的密码，并用证书中提供的公钥加密。</li><li>c) 使用约定好的HASH算法计算握手消息，并使用生成的随机数对消息进行加密，最后将之前生成的所有信息发送给网站。 </li></ul></li><li>4）网站接收客户端发来的数据之后要做以下的操作：<ul><li>a) 使用自己的私钥将信息解密取出密码，使用密码解密浏览器发来的握手消息，并验证HASH是否与浏览器发来的一致。</li><li>b) 使用密码加密一段握手消息，发送给浏览器。 </li></ul></li><li>5）浏览器解密并计算握手消息的HASH，如果与服务端发来的HASH一致，此时握手过程结束，之后所有的通信数据将由之前浏览器生成的随机密码并利用对称加密算法进行加密。 </li></ul><h2 id="HTTPS协议和HTTP协议的区别"><a href="#HTTPS协议和HTTP协议的区别" class="headerlink" title="HTTPS协议和HTTP协议的区别"></a>HTTPS协议和HTTP协议的区别</h2><ul><li>https协议需要到ca申请证书，一般免费证书很少，需要交费。</li><li>http是超文本传输协议，信息是明文传输，https 则是具有安全性的ssl加密传输协议。</li><li>http和https使用的是完全不同的连接方式用的端口也不一样,前者是80,后者是443。</li><li>http的连接很简单,是无状态的 。</li><li>HTTPS协议是由SSL+HTTP协议构建的可进行加密传输、身份认证的网络协议， 要比http协议安全。</li></ul><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="http://www.runoob.com/w3cnote/https-ssl-intro.html" target="_blank" rel="noopener">http://www.runoob.com/w3cnote/https-ssl-intro.html</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;https&lt;/p&gt;
    
    </summary>
    
    
      <category term="漏洞" scheme="http://imlzq.com/tags/%E6%BC%8F%E6%B4%9E/"/>
    
      <category term="协议" scheme="http://imlzq.com/tags/%E5%8D%8F%E8%AE%AE/"/>
    
  </entry>
  
</feed>
